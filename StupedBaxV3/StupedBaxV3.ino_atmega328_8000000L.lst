
C:\Users\Thomas\AppData\Local\Temp\arduino_build_502704/StupedBaxV3.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
       0:	0c 94 67 00 	jmp	0xce	; 0xce <__ctors_end>
       4:	0c 94 2f 06 	jmp	0xc5e	; 0xc5e <__vector_1>
       8:	0c 94 56 06 	jmp	0xcac	; 0xcac <__vector_2>
       c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      10:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      14:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      18:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      1c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      20:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      24:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      28:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      2c:	0c 94 11 04 	jmp	0x822	; 0x822 <__vector_11>
      30:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      34:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      38:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      3c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      40:	0c 94 7d 06 	jmp	0xcfa	; 0xcfa <__vector_16>
      44:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      48:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      4c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      50:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      54:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      58:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      5c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      60:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      64:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>

00000068 <__trampolines_end>:
__trampolines_start():
      68:	00 00       	nop
      6a:	00 09       	sbc	r16, r0
      6c:	00 03       	mulsu	r16, r16
      6e:	02 00       	.word	0x0002	; ????
      70:	00 04       	cpc	r0, r0
      72:	05 08       	sbc	r0, r5
	...

0000007f <digital_pin_to_bit_mask_PGM>:
      7f:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      8f:	04 08 10 20 40 80 40                                ... @.@

00000096 <digital_pin_to_port_PGM>:
      96:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      a6:	03 03 03 03 02 02 03                                .......

000000ad <port_to_input_PGM>:
      ad:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000000b7 <port_to_output_PGM>:
      b7:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000c1 <port_to_mode_PGM>:
      c1:	00 00 00 00 24 00 27 00 2a 00 00                    ....$.'.*..

000000cc <__ctors_start>:
__ctors_start():
      cc:	09 04       	cpc	r0, r9

000000ce <__ctors_end>:
__dtors_end():
      ce:	11 24       	eor	r1, r1
      d0:	1f be       	out	0x3f, r1	; 63
      d2:	cf ef       	ldi	r28, 0xFF	; 255
      d4:	d8 e0       	ldi	r29, 0x08	; 8
      d6:	de bf       	out	0x3e, r29	; 62
      d8:	cd bf       	out	0x3d, r28	; 61

000000da <__do_copy_data>:
__do_copy_data():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2409
      da:	11 e0       	ldi	r17, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2410
      dc:	a0 e0       	ldi	r26, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2411
      de:	b1 e0       	ldi	r27, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2412
      e0:	ec ec       	ldi	r30, 0xCC	; 204
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2413
      e2:	f3 e1       	ldi	r31, 0x13	; 19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2414
      e4:	02 c0       	rjmp	.+4      	; 0xea <__do_copy_data+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2417
      e6:	05 90       	lpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2422
      e8:	0d 92       	st	X+, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2424
      ea:	a6 31       	cpi	r26, 0x16	; 22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2425
      ec:	b1 07       	cpc	r27, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2426
      ee:	d9 f7       	brne	.-10     	; 0xe6 <__do_copy_data+0xc>

000000f0 <__do_clear_bss>:
__do_clear_bss():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
      f0:	21 e0       	ldi	r18, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
      f2:	a6 e1       	ldi	r26, 0x16	; 22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
      f4:	b1 e0       	ldi	r27, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
      f6:	01 c0       	rjmp	.+2      	; 0xfa <.do_clear_bss_start>

000000f8 <.do_clear_bss_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
      f8:	1d 92       	st	X+, r1

000000fa <.do_clear_bss_start>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
      fa:	af 34       	cpi	r26, 0x4F	; 79
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
      fc:	b2 07       	cpc	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
      fe:	e1 f7       	brne	.-8      	; 0xf8 <.do_clear_bss_loop>

00000100 <__do_global_ctors>:
__do_global_ctors():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
     100:	10 e0       	ldi	r17, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
     102:	c7 e6       	ldi	r28, 0x67	; 103
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
     104:	d0 e0       	ldi	r29, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
     106:	04 c0       	rjmp	.+8      	; 0x110 <__do_global_ctors+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
     108:	21 97       	sbiw	r28, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
     10a:	fe 01       	movw	r30, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
     10c:	0e 94 23 09 	call	0x1246	; 0x1246 <__tablejump2__>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
     110:	c6 36       	cpi	r28, 0x66	; 102
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
     112:	d1 07       	cpc	r29, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
     114:	c9 f7       	brne	.-14     	; 0x108 <__do_global_ctors+0x8>
     116:	0e 94 83 08 	call	0x1106	; 0x1106 <main>
     11a:	0c 94 e4 09 	jmp	0x13c8	; 0x13c8 <_exit>

0000011e <__bad_interrupt>:
__vector_22():
     11e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000122 <setSleep()>:
_Z8setSleepv():
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:124

}

///////////////////////////////////////////////////////////////////////////////////
void setSleep() { // Here goes the interrupt when going to sleep
  isActive = 0;
     122:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <isActive+0x1>
     126:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <isActive>
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:125
}
     12a:	08 95       	ret

0000012c <buttonInterrupt()>:
_Z15buttonInterruptv():
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:130


void buttonInterrupt() // Here goes the interrupt when getting awake
{
  sleep_disable(); //Disable sleep mode.
     12c:	83 b7       	in	r24, 0x33	; 51
     12e:	8e 7f       	andi	r24, 0xFE	; 254
     130:	83 bf       	out	0x33, r24	; 51
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:131
  detachInterrupt(0); //Remove interrupt from pin2
     132:	80 e0       	ldi	r24, 0x00	; 0
     134:	0e 94 1d 06 	call	0xc3a	; 0xc3a <detachInterrupt>
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:132
  attachInterrupt(0, setSleep, HIGH); // Enable sleep interrupt
     138:	41 e0       	ldi	r20, 0x01	; 1
     13a:	50 e0       	ldi	r21, 0x00	; 0
     13c:	61 e9       	ldi	r22, 0x91	; 145
     13e:	70 e0       	ldi	r23, 0x00	; 0
     140:	80 e0       	ldi	r24, 0x00	; 0
     142:	0e 94 fd 05 	call	0xbfa	; 0xbfa <attachInterrupt>
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:133
  isActive = 1;
     146:	81 e0       	ldi	r24, 0x01	; 1
     148:	90 e0       	ldi	r25, 0x00	; 0
     14a:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <isActive+0x1>
     14e:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <isActive>
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:134
}
     152:	08 95       	ret

00000154 <sensorInterrupt()>:
_Z15sensorInterruptv():
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:138

void sensorInterrupt() // Here goes the interrupt when getting awake
{
  sleep_disable(); //Disable sleep mode.
     154:	83 b7       	in	r24, 0x33	; 51
     156:	8e 7f       	andi	r24, 0xFE	; 254
     158:	83 bf       	out	0x33, r24	; 51
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:139
  detachInterrupt(digitalPinToInterrupt(sensorPin)); //Remove interrupt from pin2 
     15a:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <sensorPin>
     15e:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <sensorPin+0x1>
     162:	02 97       	sbiw	r24, 0x02	; 2
     164:	19 f1       	breq	.+70     	; 0x1ac <sensorInterrupt()+0x58>
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:139 (discriminator 1)
     166:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <sensorPin>
     16a:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <sensorPin+0x1>
     16e:	03 97       	sbiw	r24, 0x03	; 3
     170:	f9 f0       	breq	.+62     	; 0x1b0 <sensorInterrupt()+0x5c>
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:139
     172:	8f ef       	ldi	r24, 0xFF	; 255
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:139 (discriminator 8)
     174:	0e 94 1d 06 	call	0xc3a	; 0xc3a <detachInterrupt>
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:140 (discriminator 8)
  attachInterrupt(digitalPinToInterrupt(sensorPin), setSleep, LOW); // Enable sleep interrupt
     178:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <sensorPin>
     17c:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <sensorPin+0x1>
     180:	02 97       	sbiw	r24, 0x02	; 2
     182:	c1 f0       	breq	.+48     	; 0x1b4 <sensorInterrupt()+0x60>
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:140 (discriminator 1)
     184:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <sensorPin>
     188:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <sensorPin+0x1>
     18c:	03 97       	sbiw	r24, 0x03	; 3
     18e:	a1 f0       	breq	.+40     	; 0x1b8 <sensorInterrupt()+0x64>
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:140
     190:	8f ef       	ldi	r24, 0xFF	; 255
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:140 (discriminator 8)
     192:	50 e0       	ldi	r21, 0x00	; 0
     194:	40 e0       	ldi	r20, 0x00	; 0
     196:	61 e9       	ldi	r22, 0x91	; 145
     198:	70 e0       	ldi	r23, 0x00	; 0
     19a:	0e 94 fd 05 	call	0xbfa	; 0xbfa <attachInterrupt>
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:141 (discriminator 8)
  isActive = 1;
     19e:	81 e0       	ldi	r24, 0x01	; 1
     1a0:	90 e0       	ldi	r25, 0x00	; 0
     1a2:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <isActive+0x1>
     1a6:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <isActive>
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:142 (discriminator 8)
}
     1aa:	08 95       	ret
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:139
}

void sensorInterrupt() // Here goes the interrupt when getting awake
{
  sleep_disable(); //Disable sleep mode.
  detachInterrupt(digitalPinToInterrupt(sensorPin)); //Remove interrupt from pin2 
     1ac:	80 e0       	ldi	r24, 0x00	; 0
     1ae:	e2 cf       	rjmp	.-60     	; 0x174 <sensorInterrupt()+0x20>
     1b0:	81 e0       	ldi	r24, 0x01	; 1
     1b2:	e0 cf       	rjmp	.-64     	; 0x174 <sensorInterrupt()+0x20>
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:140
  attachInterrupt(digitalPinToInterrupt(sensorPin), setSleep, LOW); // Enable sleep interrupt
     1b4:	80 e0       	ldi	r24, 0x00	; 0
     1b6:	ed cf       	rjmp	.-38     	; 0x192 <sensorInterrupt()+0x3e>
     1b8:	81 e0       	ldi	r24, 0x01	; 1
     1ba:	eb cf       	rjmp	.-42     	; 0x192 <sensorInterrupt()+0x3e>

000001bc <sleepNow()>:
_Z8sleepNowv():
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:107

///////////////////////////////////////////////////////////////////////////////////

void sleepNow()
{
  digitalWrite(LEDPin, LOW);
     1bc:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <LEDPin>
     1c0:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <LEDPin+0x1>
     1c4:	60 e0       	ldi	r22, 0x00	; 0
     1c6:	0e 94 b2 07 	call	0xf64	; 0xf64 <digitalWrite>
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:108
  digitalWrite(mosfetPin, HIGH);
     1ca:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <mosfetPin>
     1ce:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <mosfetPin+0x1>
     1d2:	61 e0       	ldi	r22, 0x01	; 1
     1d4:	0e 94 b2 07 	call	0xf64	; 0xf64 <digitalWrite>
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:110

  sleep_enable();
     1d8:	83 b7       	in	r24, 0x33	; 51
     1da:	81 60       	ori	r24, 0x01	; 1
     1dc:	83 bf       	out	0x33, r24	; 51
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:111
  detachInterrupt(0); // Remove the sleep interrupt
     1de:	80 e0       	ldi	r24, 0x00	; 0
     1e0:	0e 94 1d 06 	call	0xc3a	; 0xc3a <detachInterrupt>
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:112
  attachInterrupt(0, buttonInterrupt, LOW); // Add buttonInterrupt interrupt
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	40 e0       	ldi	r20, 0x00	; 0
     1e8:	66 e9       	ldi	r22, 0x96	; 150
     1ea:	70 e0       	ldi	r23, 0x00	; 0
     1ec:	80 e0       	ldi	r24, 0x00	; 0
     1ee:	0e 94 fd 05 	call	0xbfa	; 0xbfa <attachInterrupt>
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:114
  
  detachInterrupt(digitalPinToInterrupt(sensorPin)); // Remove the sleep interrupt
     1f2:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <sensorPin>
     1f6:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <sensorPin+0x1>
     1fa:	02 97       	sbiw	r24, 0x02	; 2
     1fc:	11 f1       	breq	.+68     	; 0x242 <sleepNow()+0x86>
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:114 (discriminator 1)
     1fe:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <sensorPin>
     202:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <sensorPin+0x1>
     206:	03 97       	sbiw	r24, 0x03	; 3
     208:	f1 f0       	breq	.+60     	; 0x246 <sleepNow()+0x8a>
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:114
     20a:	8f ef       	ldi	r24, 0xFF	; 255
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:114 (discriminator 8)
     20c:	0e 94 1d 06 	call	0xc3a	; 0xc3a <detachInterrupt>
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:115 (discriminator 8)
  attachInterrupt(digitalPinToInterrupt(sensorPin), sensorInterrupt, HIGH); // Add sensorInterrupt interrupt
     210:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <sensorPin>
     214:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <sensorPin+0x1>
     218:	02 97       	sbiw	r24, 0x02	; 2
     21a:	b9 f0       	breq	.+46     	; 0x24a <sleepNow()+0x8e>
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:115 (discriminator 1)
     21c:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <sensorPin>
     220:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <sensorPin+0x1>
     224:	03 97       	sbiw	r24, 0x03	; 3
     226:	99 f0       	breq	.+38     	; 0x24e <sleepNow()+0x92>
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:115
     228:	8f ef       	ldi	r24, 0xFF	; 255
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:115 (discriminator 8)
     22a:	41 e0       	ldi	r20, 0x01	; 1
     22c:	50 e0       	ldi	r21, 0x00	; 0
     22e:	6a ea       	ldi	r22, 0xAA	; 170
     230:	70 e0       	ldi	r23, 0x00	; 0
     232:	0e 94 fd 05 	call	0xbfa	; 0xbfa <attachInterrupt>
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:117 (discriminator 8)
  
  set_sleep_mode(SLEEP_MODE_PWR_DOWN);
     236:	83 b7       	in	r24, 0x33	; 51
     238:	81 7f       	andi	r24, 0xF1	; 241
     23a:	84 60       	ori	r24, 0x04	; 4
     23c:	83 bf       	out	0x33, r24	; 51
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:118 (discriminator 8)
  sleep_cpu();//activating sleep mode   
     23e:	88 95       	sleep
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:120 (discriminator 8)

}
     240:	08 95       	ret
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:114

  sleep_enable();
  detachInterrupt(0); // Remove the sleep interrupt
  attachInterrupt(0, buttonInterrupt, LOW); // Add buttonInterrupt interrupt
  
  detachInterrupt(digitalPinToInterrupt(sensorPin)); // Remove the sleep interrupt
     242:	80 e0       	ldi	r24, 0x00	; 0
     244:	e3 cf       	rjmp	.-58     	; 0x20c <sleepNow()+0x50>
     246:	81 e0       	ldi	r24, 0x01	; 1
     248:	e1 cf       	rjmp	.-62     	; 0x20c <sleepNow()+0x50>
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:115
  attachInterrupt(digitalPinToInterrupt(sensorPin), sensorInterrupt, HIGH); // Add sensorInterrupt interrupt
     24a:	80 e0       	ldi	r24, 0x00	; 0
     24c:	ee cf       	rjmp	.-36     	; 0x22a <sleepNow()+0x6e>
     24e:	81 e0       	ldi	r24, 0x01	; 1
     250:	ec cf       	rjmp	.-40     	; 0x22a <sleepNow()+0x6e>

00000252 <setup>:
setup():
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:30
Servo myLidservo;

///////////////////////////////////////////////////////////////////////////////////
void setup() {
  // put your setup code here, to run once:
  pinMode(wakePin, INPUT_PULLUP);
     252:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <wakePin>
     256:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <wakePin+0x1>
     25a:	62 e0       	ldi	r22, 0x02	; 2
     25c:	0e 94 76 07 	call	0xeec	; 0xeec <pinMode>
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:31
  pinMode(sensorPin, INPUT);
     260:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <sensorPin>
     264:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <sensorPin+0x1>
     268:	60 e0       	ldi	r22, 0x00	; 0
     26a:	0e 94 76 07 	call	0xeec	; 0xeec <pinMode>
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:32
  pinMode(LEDPin, OUTPUT);
     26e:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <LEDPin>
     272:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <LEDPin+0x1>
     276:	61 e0       	ldi	r22, 0x01	; 1
     278:	0e 94 76 07 	call	0xeec	; 0xeec <pinMode>
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:33
  pinMode(mosfetPin, OUTPUT);
     27c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <mosfetPin>
     280:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <mosfetPin+0x1>
     284:	61 e0       	ldi	r22, 0x01	; 1
     286:	0e 94 76 07 	call	0xeec	; 0xeec <pinMode>
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:36

  /////////////////////////////////
  digitalWrite(mosfetPin, LOW);
     28a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <mosfetPin>
     28e:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <mosfetPin+0x1>
     292:	60 e0       	ldi	r22, 0x00	; 0
     294:	0e 94 b2 07 	call	0xf64	; 0xf64 <digitalWrite>
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:37
  myservo.attach(servoPin);
     298:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <servoPin>
     29c:	70 91 0b 01 	lds	r23, 0x010B	; 0x80010b <servoPin+0x1>
     2a0:	89 e1       	ldi	r24, 0x19	; 25
     2a2:	91 e0       	ldi	r25, 0x01	; 1
     2a4:	0e 94 66 05 	call	0xacc	; 0xacc <Servo::attach(int)>
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:38
  myservo.write(0);
     2a8:	70 e0       	ldi	r23, 0x00	; 0
     2aa:	60 e0       	ldi	r22, 0x00	; 0
     2ac:	89 e1       	ldi	r24, 0x19	; 25
     2ae:	91 e0       	ldi	r25, 0x01	; 1
     2b0:	0e 94 a1 05 	call	0xb42	; 0xb42 <Servo::write(int)>
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:40

  myLidservo.attach(servoLidPin);
     2b4:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <servoLidPin>
     2b8:	70 91 09 01 	lds	r23, 0x0109	; 0x800109 <servoLidPin+0x1>
     2bc:	86 e1       	ldi	r24, 0x16	; 22
     2be:	91 e0       	ldi	r25, 0x01	; 1
     2c0:	0e 94 66 05 	call	0xacc	; 0xacc <Servo::attach(int)>
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:41
  myLidservo.write(lidPos);
     2c4:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <lidPos>
     2c8:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <lidPos+0x1>
     2cc:	86 e1       	ldi	r24, 0x16	; 22
     2ce:	91 e0       	ldi	r25, 0x01	; 1
     2d0:	0e 94 a1 05 	call	0xb42	; 0xb42 <Servo::write(int)>
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:42
  delay(1000);
     2d4:	68 ee       	ldi	r22, 0xE8	; 232
     2d6:	73 e0       	ldi	r23, 0x03	; 3
     2d8:	80 e0       	ldi	r24, 0x00	; 0
     2da:	90 e0       	ldi	r25, 0x00	; 0
     2dc:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <delay>
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:43
  digitalWrite(mosfetPin, HIGH);
     2e0:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <mosfetPin>
     2e4:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <mosfetPin+0x1>
     2e8:	61 e0       	ldi	r22, 0x01	; 1
     2ea:	0e 94 b2 07 	call	0xf64	; 0xf64 <digitalWrite>
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:47
  /////////////////////////////////

  // Check init values to ensure correct sleep
  if ((digitalRead(wakePin) == LOW) || (digitalRead(sensorPin) == HIGH)) { // If switch is turned on or sensor detected enable sleep interrupt
     2ee:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <wakePin>
     2f2:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <wakePin+0x1>
     2f6:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <digitalRead>
     2fa:	89 2b       	or	r24, r25
     2fc:	d1 f4       	brne	.+52     	; 0x332 <setup+0xe0>
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:48
    isActive = 1;
     2fe:	81 e0       	ldi	r24, 0x01	; 1
     300:	90 e0       	ldi	r25, 0x00	; 0
     302:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <isActive+0x1>
     306:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <isActive>
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:49
    attachInterrupt(0, setSleep, HIGH);
     30a:	41 e0       	ldi	r20, 0x01	; 1
     30c:	50 e0       	ldi	r21, 0x00	; 0
     30e:	61 e9       	ldi	r22, 0x91	; 145
     310:	70 e0       	ldi	r23, 0x00	; 0
     312:	80 e0       	ldi	r24, 0x00	; 0
     314:	0e 94 fd 05 	call	0xbfa	; 0xbfa <attachInterrupt>
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:50
    attachInterrupt(digitalPinToInterrupt(sensorPin), setSleep, LOW);
     318:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <sensorPin>
     31c:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <sensorPin+0x1>
     320:	02 97       	sbiw	r24, 0x02	; 2
     322:	a9 f4       	brne	.+42     	; 0x34e <setup+0xfc>
     324:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:50 (discriminator 8)
     326:	50 e0       	ldi	r21, 0x00	; 0
     328:	40 e0       	ldi	r20, 0x00	; 0
     32a:	61 e9       	ldi	r22, 0x91	; 145
     32c:	70 e0       	ldi	r23, 0x00	; 0
     32e:	0c 94 fd 05 	jmp	0xbfa	; 0xbfa <attachInterrupt>
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:47 (discriminator 2)
  delay(1000);
  digitalWrite(mosfetPin, HIGH);
  /////////////////////////////////

  // Check init values to ensure correct sleep
  if ((digitalRead(wakePin) == LOW) || (digitalRead(sensorPin) == HIGH)) { // If switch is turned on or sensor detected enable sleep interrupt
     332:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <sensorPin>
     336:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <sensorPin+0x1>
     33a:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <digitalRead>
     33e:	01 97       	sbiw	r24, 0x01	; 1
     340:	f1 f2       	breq	.-68     	; 0x2fe <setup+0xac>
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:52
    isActive = 1;
    attachInterrupt(0, setSleep, HIGH);
    attachInterrupt(digitalPinToInterrupt(sensorPin), setSleep, LOW);
  } else {
    isActive = 0;
     342:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <isActive+0x1>
     346:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <isActive>
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:53
    sleepNow(); // If switch is off go to sleep
     34a:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <sleepNow()>
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:50 (discriminator 1)

  // Check init values to ensure correct sleep
  if ((digitalRead(wakePin) == LOW) || (digitalRead(sensorPin) == HIGH)) { // If switch is turned on or sensor detected enable sleep interrupt
    isActive = 1;
    attachInterrupt(0, setSleep, HIGH);
    attachInterrupt(digitalPinToInterrupt(sensorPin), setSleep, LOW);
     34e:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <sensorPin>
     352:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <sensorPin+0x1>
     356:	03 97       	sbiw	r24, 0x03	; 3
     358:	11 f0       	breq	.+4      	; 0x35e <setup+0x10c>
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:50
     35a:	8f ef       	ldi	r24, 0xFF	; 255
     35c:	e4 cf       	rjmp	.-56     	; 0x326 <setup+0xd4>
     35e:	81 e0       	ldi	r24, 0x01	; 1
     360:	e2 cf       	rjmp	.-60     	; 0x326 <setup+0xd4>

00000362 <openLid(int, int)>:
_Z7openLidii():
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:206

  while (isActive) {} 
  closeLid(110, 12);
}

void openLid(int newPos, int speed) {
     362:	cf 92       	push	r12
     364:	df 92       	push	r13
     366:	ef 92       	push	r14
     368:	ff 92       	push	r15
     36a:	0f 93       	push	r16
     36c:	1f 93       	push	r17
     36e:	cf 93       	push	r28
     370:	df 93       	push	r29
     372:	8c 01       	movw	r16, r24
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:207
  for (unsigned int i = lidPos; i > newPos && isActive == 1; i -= 2) {
     374:	c0 91 04 01 	lds	r28, 0x0104	; 0x800104 <lidPos>
     378:	d0 91 05 01 	lds	r29, 0x0105	; 0x800105 <lidPos+0x1>
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:210
    lidPos -= 2;
    myLidservo.write(i);
    delay(speed);
     37c:	6b 01       	movw	r12, r22
     37e:	77 0f       	add	r23, r23
     380:	ee 08       	sbc	r14, r14
     382:	ff 08       	sbc	r15, r15
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:207 (discriminator 9)
  while (isActive) {} 
  closeLid(110, 12);
}

void openLid(int newPos, int speed) {
  for (unsigned int i = lidPos; i > newPos && isActive == 1; i -= 2) {
     384:	0c 17       	cp	r16, r28
     386:	1d 07       	cpc	r17, r29
     388:	d0 f4       	brcc	.+52     	; 0x3be <openLid(int, int)+0x5c>
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:207 (discriminator 2)
     38a:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <isActive>
     38e:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <isActive+0x1>
     392:	01 97       	sbiw	r24, 0x01	; 1
     394:	a1 f4       	brne	.+40     	; 0x3be <openLid(int, int)+0x5c>
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:208
    lidPos -= 2;
     396:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <lidPos>
     39a:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <lidPos+0x1>
     39e:	02 97       	sbiw	r24, 0x02	; 2
     3a0:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <lidPos+0x1>
     3a4:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <lidPos>
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:209
    myLidservo.write(i);
     3a8:	be 01       	movw	r22, r28
     3aa:	86 e1       	ldi	r24, 0x16	; 22
     3ac:	91 e0       	ldi	r25, 0x01	; 1
     3ae:	0e 94 a1 05 	call	0xb42	; 0xb42 <Servo::write(int)>
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:210
    delay(speed);
     3b2:	c7 01       	movw	r24, r14
     3b4:	b6 01       	movw	r22, r12
     3b6:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <delay>
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:207
  while (isActive) {} 
  closeLid(110, 12);
}

void openLid(int newPos, int speed) {
  for (unsigned int i = lidPos; i > newPos && isActive == 1; i -= 2) {
     3ba:	22 97       	sbiw	r28, 0x02	; 2
     3bc:	e3 cf       	rjmp	.-58     	; 0x384 <openLid(int, int)+0x22>
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:213
    lidPos -= 2;
    myLidservo.write(i);
    delay(speed);
  }

}
     3be:	df 91       	pop	r29
     3c0:	cf 91       	pop	r28
     3c2:	1f 91       	pop	r17
     3c4:	0f 91       	pop	r16
     3c6:	ff 90       	pop	r15
     3c8:	ef 90       	pop	r14
     3ca:	df 90       	pop	r13
     3cc:	cf 90       	pop	r12
     3ce:	08 95       	ret

000003d0 <closeLid(int, int)>:
_Z8closeLidii():
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:215

void closeLid(int newPos, int speed) {
     3d0:	cf 92       	push	r12
     3d2:	df 92       	push	r13
     3d4:	ef 92       	push	r14
     3d6:	ff 92       	push	r15
     3d8:	0f 93       	push	r16
     3da:	1f 93       	push	r17
     3dc:	cf 93       	push	r28
     3de:	df 93       	push	r29
     3e0:	8c 01       	movw	r16, r24
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:216
  for (unsigned int i = lidPos; i < newPos; i += 2) {
     3e2:	c0 91 04 01 	lds	r28, 0x0104	; 0x800104 <lidPos>
     3e6:	d0 91 05 01 	lds	r29, 0x0105	; 0x800105 <lidPos+0x1>
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:219
    lidPos += 2;
    myLidservo.write(i);
    delay(speed);
     3ea:	6b 01       	movw	r12, r22
     3ec:	77 0f       	add	r23, r23
     3ee:	ee 08       	sbc	r14, r14
     3f0:	ff 08       	sbc	r15, r15
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:216 (discriminator 3)
  }

}

void closeLid(int newPos, int speed) {
  for (unsigned int i = lidPos; i < newPos; i += 2) {
     3f2:	c0 17       	cp	r28, r16
     3f4:	d1 07       	cpc	r29, r17
     3f6:	a0 f4       	brcc	.+40     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:217 (discriminator 2)
    lidPos += 2;
     3f8:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <lidPos>
     3fc:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <lidPos+0x1>
     400:	02 96       	adiw	r24, 0x02	; 2
     402:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <lidPos+0x1>
     406:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <lidPos>
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:218 (discriminator 2)
    myLidservo.write(i);
     40a:	be 01       	movw	r22, r28
     40c:	86 e1       	ldi	r24, 0x16	; 22
     40e:	91 e0       	ldi	r25, 0x01	; 1
     410:	0e 94 a1 05 	call	0xb42	; 0xb42 <Servo::write(int)>
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:219 (discriminator 2)
    delay(speed);
     414:	c7 01       	movw	r24, r14
     416:	b6 01       	movw	r22, r12
     418:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <delay>
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:216 (discriminator 2)
  }

}

void closeLid(int newPos, int speed) {
  for (unsigned int i = lidPos; i < newPos; i += 2) {
     41c:	22 96       	adiw	r28, 0x02	; 2
     41e:	e9 cf       	rjmp	.-46     	; 0x3f2 <closeLid(int, int)+0x22>
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:221
    lidPos += 2;
    myLidservo.write(i);
    delay(speed);
  }
}
     420:	df 91       	pop	r29
     422:	cf 91       	pop	r28
     424:	1f 91       	pop	r17
     426:	0f 91       	pop	r16
     428:	ff 90       	pop	r15
     42a:	ef 90       	pop	r14
     42c:	df 90       	pop	r13
     42e:	cf 90       	pop	r12
     430:	08 95       	ret

00000432 <runLidTest()>:
_Z10runLidTestv():
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:200
}


//Really quick
void runLidTest() { 
  openLid(10, 5); 
     432:	65 e0       	ldi	r22, 0x05	; 5
     434:	70 e0       	ldi	r23, 0x00	; 0
     436:	8a e0       	ldi	r24, 0x0A	; 10
     438:	90 e0       	ldi	r25, 0x00	; 0
     43a:	0e 94 b1 01 	call	0x362	; 0x362 <openLid(int, int)>
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:202

  while (isActive) {} 
     43e:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <isActive>
     442:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <isActive+0x1>
     446:	89 2b       	or	r24, r25
     448:	d1 f7       	brne	.-12     	; 0x43e <runLidTest()+0xc>
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:203
  closeLid(110, 12);
     44a:	6c e0       	ldi	r22, 0x0C	; 12
     44c:	70 e0       	ldi	r23, 0x00	; 0
     44e:	8e e6       	ldi	r24, 0x6E	; 110
     450:	90 e0       	ldi	r25, 0x00	; 0
     452:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <closeLid(int, int)>

00000456 <forward(int, int)>:
_Z7forwardii():
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:224
    delay(speed);
  }
}


void forward(int newPos, int speed) {
     456:	cf 92       	push	r12
     458:	df 92       	push	r13
     45a:	ef 92       	push	r14
     45c:	ff 92       	push	r15
     45e:	0f 93       	push	r16
     460:	1f 93       	push	r17
     462:	cf 93       	push	r28
     464:	df 93       	push	r29
     466:	8c 01       	movw	r16, r24
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:226

  for (unsigned int i = pos; i < newPos && isActive == 1; i += 2) {
     468:	c0 91 1c 01 	lds	r28, 0x011C	; 0x80011c <pos>
     46c:	d0 91 1d 01 	lds	r29, 0x011D	; 0x80011d <pos+0x1>
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:229
    pos += 2;
    myservo.write(i);
    delay(speed);
     470:	6b 01       	movw	r12, r22
     472:	77 0f       	add	r23, r23
     474:	ee 08       	sbc	r14, r14
     476:	ff 08       	sbc	r15, r15
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:226 (discriminator 9)
}


void forward(int newPos, int speed) {

  for (unsigned int i = pos; i < newPos && isActive == 1; i += 2) {
     478:	c0 17       	cp	r28, r16
     47a:	d1 07       	cpc	r29, r17
     47c:	d0 f4       	brcc	.+52     	; 0x4b2 <forward(int, int)+0x5c>
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:226 (discriminator 2)
     47e:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <isActive>
     482:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <isActive+0x1>
     486:	01 97       	sbiw	r24, 0x01	; 1
     488:	a1 f4       	brne	.+40     	; 0x4b2 <forward(int, int)+0x5c>
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:227
    pos += 2;
     48a:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <pos>
     48e:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <pos+0x1>
     492:	02 96       	adiw	r24, 0x02	; 2
     494:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <pos+0x1>
     498:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <pos>
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:228
    myservo.write(i);
     49c:	be 01       	movw	r22, r28
     49e:	89 e1       	ldi	r24, 0x19	; 25
     4a0:	91 e0       	ldi	r25, 0x01	; 1
     4a2:	0e 94 a1 05 	call	0xb42	; 0xb42 <Servo::write(int)>
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:229
    delay(speed);
     4a6:	c7 01       	movw	r24, r14
     4a8:	b6 01       	movw	r22, r12
     4aa:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <delay>
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:226
}


void forward(int newPos, int speed) {

  for (unsigned int i = pos; i < newPos && isActive == 1; i += 2) {
     4ae:	22 96       	adiw	r28, 0x02	; 2
     4b0:	e3 cf       	rjmp	.-58     	; 0x478 <forward(int, int)+0x22>
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:231
    pos += 2;
    myservo.write(i);
    delay(speed);
  }
}
     4b2:	df 91       	pop	r29
     4b4:	cf 91       	pop	r28
     4b6:	1f 91       	pop	r17
     4b8:	0f 91       	pop	r16
     4ba:	ff 90       	pop	r15
     4bc:	ef 90       	pop	r14
     4be:	df 90       	pop	r13
     4c0:	cf 90       	pop	r12
     4c2:	08 95       	ret

000004c4 <back(int, int)>:
_Z4backii():
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:233

void back(int newPos, int delayTime) {
     4c4:	cf 92       	push	r12
     4c6:	df 92       	push	r13
     4c8:	ef 92       	push	r14
     4ca:	ff 92       	push	r15
     4cc:	0f 93       	push	r16
     4ce:	1f 93       	push	r17
     4d0:	cf 93       	push	r28
     4d2:	df 93       	push	r29
     4d4:	8c 01       	movw	r16, r24
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:234
  for (unsigned int i = pos; i > newPos && isActive == 1; i -= 2) {
     4d6:	c0 91 1c 01 	lds	r28, 0x011C	; 0x80011c <pos>
     4da:	d0 91 1d 01 	lds	r29, 0x011D	; 0x80011d <pos+0x1>
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:237
    pos -= 2;
    myservo.write(pos);
    delay(delayTime);
     4de:	6b 01       	movw	r12, r22
     4e0:	77 0f       	add	r23, r23
     4e2:	ee 08       	sbc	r14, r14
     4e4:	ff 08       	sbc	r15, r15
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:234 (discriminator 9)
    delay(speed);
  }
}

void back(int newPos, int delayTime) {
  for (unsigned int i = pos; i > newPos && isActive == 1; i -= 2) {
     4e6:	0c 17       	cp	r16, r28
     4e8:	1d 07       	cpc	r17, r29
     4ea:	e8 f4       	brcc	.+58     	; 0x526 <back(int, int)+0x62>
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:234 (discriminator 2)
     4ec:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <isActive>
     4f0:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <isActive+0x1>
     4f4:	01 97       	sbiw	r24, 0x01	; 1
     4f6:	b9 f4       	brne	.+46     	; 0x526 <back(int, int)+0x62>
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:235
    pos -= 2;
     4f8:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <pos>
     4fc:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <pos+0x1>
     500:	02 97       	sbiw	r24, 0x02	; 2
     502:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <pos+0x1>
     506:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <pos>
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:236
    myservo.write(pos);
     50a:	60 91 1c 01 	lds	r22, 0x011C	; 0x80011c <pos>
     50e:	70 91 1d 01 	lds	r23, 0x011D	; 0x80011d <pos+0x1>
     512:	89 e1       	ldi	r24, 0x19	; 25
     514:	91 e0       	ldi	r25, 0x01	; 1
     516:	0e 94 a1 05 	call	0xb42	; 0xb42 <Servo::write(int)>
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:237
    delay(delayTime);
     51a:	c7 01       	movw	r24, r14
     51c:	b6 01       	movw	r22, r12
     51e:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <delay>
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:234
    delay(speed);
  }
}

void back(int newPos, int delayTime) {
  for (unsigned int i = pos; i > newPos && isActive == 1; i -= 2) {
     522:	22 97       	sbiw	r28, 0x02	; 2
     524:	e0 cf       	rjmp	.-64     	; 0x4e6 <back(int, int)+0x22>
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:240
    pos -= 2;
    myservo.write(pos);
    delay(delayTime);
  }

}
     526:	df 91       	pop	r29
     528:	cf 91       	pop	r28
     52a:	1f 91       	pop	r17
     52c:	0f 91       	pop	r16
     52e:	ff 90       	pop	r15
     530:	ef 90       	pop	r14
     532:	df 90       	pop	r13
     534:	cf 90       	pop	r12
     536:	08 95       	ret

00000538 <backEnd(int, int)>:
_Z7backEndii():
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:242

void backEnd(int newPos, int delayTime) {
     538:	cf 92       	push	r12
     53a:	df 92       	push	r13
     53c:	ef 92       	push	r14
     53e:	ff 92       	push	r15
     540:	0f 93       	push	r16
     542:	1f 93       	push	r17
     544:	cf 93       	push	r28
     546:	df 93       	push	r29
     548:	8c 01       	movw	r16, r24
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:243
  for (unsigned int i = pos; i > newPos; i -= 2) {
     54a:	c0 91 1c 01 	lds	r28, 0x011C	; 0x80011c <pos>
     54e:	d0 91 1d 01 	lds	r29, 0x011D	; 0x80011d <pos+0x1>
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:246
    pos -= 2;
    myservo.write(pos);
    delay(delayTime);
     552:	6b 01       	movw	r12, r22
     554:	77 0f       	add	r23, r23
     556:	ee 08       	sbc	r14, r14
     558:	ff 08       	sbc	r15, r15
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:243 (discriminator 3)
  }

}

void backEnd(int newPos, int delayTime) {
  for (unsigned int i = pos; i > newPos; i -= 2) {
     55a:	0c 17       	cp	r16, r28
     55c:	1d 07       	cpc	r17, r29
     55e:	b8 f4       	brcc	.+46     	; 0x58e <backEnd(int, int)+0x56>
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:244 (discriminator 2)
    pos -= 2;
     560:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <pos>
     564:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <pos+0x1>
     568:	02 97       	sbiw	r24, 0x02	; 2
     56a:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <pos+0x1>
     56e:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <pos>
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:245 (discriminator 2)
    myservo.write(pos);
     572:	60 91 1c 01 	lds	r22, 0x011C	; 0x80011c <pos>
     576:	70 91 1d 01 	lds	r23, 0x011D	; 0x80011d <pos+0x1>
     57a:	89 e1       	ldi	r24, 0x19	; 25
     57c:	91 e0       	ldi	r25, 0x01	; 1
     57e:	0e 94 a1 05 	call	0xb42	; 0xb42 <Servo::write(int)>
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:246 (discriminator 2)
    delay(delayTime);
     582:	c7 01       	movw	r24, r14
     584:	b6 01       	movw	r22, r12
     586:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <delay>
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:243 (discriminator 2)
  }

}

void backEnd(int newPos, int delayTime) {
  for (unsigned int i = pos; i > newPos; i -= 2) {
     58a:	22 97       	sbiw	r28, 0x02	; 2
     58c:	e6 cf       	rjmp	.-52     	; 0x55a <backEnd(int, int)+0x22>
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:248
    pos -= 2;
    myservo.write(pos);
    delay(delayTime);
  }
  pos = newPos;
     58e:	10 93 1d 01 	sts	0x011D, r17	; 0x80011d <pos+0x1>
     592:	00 93 1c 01 	sts	0x011C, r16	; 0x80011c <pos>
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:249
}
     596:	df 91       	pop	r29
     598:	cf 91       	pop	r28
     59a:	1f 91       	pop	r17
     59c:	0f 91       	pop	r16
     59e:	ff 90       	pop	r15
     5a0:	ef 90       	pop	r14
     5a2:	df 90       	pop	r13
     5a4:	cf 90       	pop	r12
     5a6:	08 95       	ret

000005a8 <run2()>:
_Z4run2v():
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:161
  closeLid(110, 20);
}
 
//Quick
void run2() {
  openLid(10, 10);
     5a8:	6a e0       	ldi	r22, 0x0A	; 10
     5aa:	70 e0       	ldi	r23, 0x00	; 0
     5ac:	8a e0       	ldi	r24, 0x0A	; 10
     5ae:	90 e0       	ldi	r25, 0x00	; 0
     5b0:	0e 94 b1 01 	call	0x362	; 0x362 <openLid(int, int)>
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:162
  forward(145, 1);
     5b4:	61 e0       	ldi	r22, 0x01	; 1
     5b6:	70 e0       	ldi	r23, 0x00	; 0
     5b8:	81 e9       	ldi	r24, 0x91	; 145
     5ba:	90 e0       	ldi	r25, 0x00	; 0
     5bc:	0e 94 2b 02 	call	0x456	; 0x456 <forward(int, int)>
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:164

  while (isActive) {}
     5c0:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <isActive>
     5c4:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <isActive+0x1>
     5c8:	89 2b       	or	r24, r25
     5ca:	d1 f7       	brne	.-12     	; 0x5c0 <run2()+0x18>
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:165
  backEnd(0, 10); 
     5cc:	6a e0       	ldi	r22, 0x0A	; 10
     5ce:	70 e0       	ldi	r23, 0x00	; 0
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	80 e0       	ldi	r24, 0x00	; 0
     5d4:	0e 94 9c 02 	call	0x538	; 0x538 <backEnd(int, int)>
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:166
  closeLid(110, 10);
     5d8:	6a e0       	ldi	r22, 0x0A	; 10
     5da:	70 e0       	ldi	r23, 0x00	; 0
     5dc:	8e e6       	ldi	r24, 0x6E	; 110
     5de:	90 e0       	ldi	r25, 0x00	; 0
     5e0:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <closeLid(int, int)>

000005e4 <run3()>:
_Z4run3v():
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:171
}

//Really quick
void run3() { 
  openLid(10, 5);
     5e4:	65 e0       	ldi	r22, 0x05	; 5
     5e6:	70 e0       	ldi	r23, 0x00	; 0
     5e8:	8a e0       	ldi	r24, 0x0A	; 10
     5ea:	90 e0       	ldi	r25, 0x00	; 0
     5ec:	0e 94 b1 01 	call	0x362	; 0x362 <openLid(int, int)>
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:172
  forward(145, 0);
     5f0:	70 e0       	ldi	r23, 0x00	; 0
     5f2:	60 e0       	ldi	r22, 0x00	; 0
     5f4:	81 e9       	ldi	r24, 0x91	; 145
     5f6:	90 e0       	ldi	r25, 0x00	; 0
     5f8:	0e 94 2b 02 	call	0x456	; 0x456 <forward(int, int)>
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:174

  while (isActive) {}
     5fc:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <isActive>
     600:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <isActive+0x1>
     604:	89 2b       	or	r24, r25
     606:	d1 f7       	brne	.-12     	; 0x5fc <run3()+0x18>
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:175
  backEnd(0, 10);  
     608:	6a e0       	ldi	r22, 0x0A	; 10
     60a:	70 e0       	ldi	r23, 0x00	; 0
     60c:	90 e0       	ldi	r25, 0x00	; 0
     60e:	80 e0       	ldi	r24, 0x00	; 0
     610:	0e 94 9c 02 	call	0x538	; 0x538 <backEnd(int, int)>
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:176
  closeLid(110, 1);
     614:	61 e0       	ldi	r22, 0x01	; 1
     616:	70 e0       	ldi	r23, 0x00	; 0
     618:	8e e6       	ldi	r24, 0x6E	; 110
     61a:	90 e0       	ldi	r25, 0x00	; 0
     61c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <closeLid(int, int)>

00000620 <hold(int)>:
_Z4holdi():
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:251
    delay(delayTime);
  }
  pos = newPos;
}

void hold(int ms) {
     620:	cf 92       	push	r12
     622:	df 92       	push	r13
     624:	ef 92       	push	r14
     626:	ff 92       	push	r15
     628:	cf 93       	push	r28
     62a:	df 93       	push	r29
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:253
  for (unsigned int i = 0; i <= 100 && isActive == 1; i += 1) {
    delay(ms / 100);
     62c:	64 e6       	ldi	r22, 0x64	; 100
     62e:	70 e0       	ldi	r23, 0x00	; 0
     630:	0e 94 af 08 	call	0x115e	; 0x115e <__divmodhi4>
     634:	6b 01       	movw	r12, r22
     636:	77 0f       	add	r23, r23
     638:	ee 08       	sbc	r14, r14
     63a:	ff 08       	sbc	r15, r15
     63c:	c5 e6       	ldi	r28, 0x65	; 101
     63e:	d0 e0       	ldi	r29, 0x00	; 0
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:252 (discriminator 2)
  }
  pos = newPos;
}

void hold(int ms) {
  for (unsigned int i = 0; i <= 100 && isActive == 1; i += 1) {
     640:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <isActive>
     644:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <isActive+0x1>
     648:	01 97       	sbiw	r24, 0x01	; 1
     64a:	31 f4       	brne	.+12     	; 0x658 <hold(int)+0x38>
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:253
    delay(ms / 100);
     64c:	c7 01       	movw	r24, r14
     64e:	b6 01       	movw	r22, r12
     650:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <delay>
     654:	21 97       	sbiw	r28, 0x01	; 1
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:252
  }
  pos = newPos;
}

void hold(int ms) {
  for (unsigned int i = 0; i <= 100 && isActive == 1; i += 1) {
     656:	a1 f7       	brne	.-24     	; 0x640 <hold(int)+0x20>
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:255
    delay(ms / 100);
  }
}
     658:	df 91       	pop	r29
     65a:	cf 91       	pop	r28
     65c:	ff 90       	pop	r15
     65e:	ef 90       	pop	r14
     660:	df 90       	pop	r13
     662:	cf 90       	pop	r12
     664:	08 95       	ret

00000666 <run1()>:
_Z4run1v():
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:148


///////////////////////////////////////////////////////////////////////////////////
// Tease
void run1() {
  openLid(10, 30);
     666:	6e e1       	ldi	r22, 0x1E	; 30
     668:	70 e0       	ldi	r23, 0x00	; 0
     66a:	8a e0       	ldi	r24, 0x0A	; 10
     66c:	90 e0       	ldi	r25, 0x00	; 0
     66e:	0e 94 b1 01 	call	0x362	; 0x362 <openLid(int, int)>
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:149
  forward(134, 30);
     672:	6e e1       	ldi	r22, 0x1E	; 30
     674:	70 e0       	ldi	r23, 0x00	; 0
     676:	86 e8       	ldi	r24, 0x86	; 134
     678:	90 e0       	ldi	r25, 0x00	; 0
     67a:	0e 94 2b 02 	call	0x456	; 0x456 <forward(int, int)>
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:150
  hold(2000);
     67e:	80 ed       	ldi	r24, 0xD0	; 208
     680:	97 e0       	ldi	r25, 0x07	; 7
     682:	0e 94 10 03 	call	0x620	; 0x620 <hold(int)>
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:151
  back(50, 30);
     686:	6e e1       	ldi	r22, 0x1E	; 30
     688:	70 e0       	ldi	r23, 0x00	; 0
     68a:	82 e3       	ldi	r24, 0x32	; 50
     68c:	90 e0       	ldi	r25, 0x00	; 0
     68e:	0e 94 62 02 	call	0x4c4	; 0x4c4 <back(int, int)>
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:152
  forward(145, 0);
     692:	70 e0       	ldi	r23, 0x00	; 0
     694:	60 e0       	ldi	r22, 0x00	; 0
     696:	81 e9       	ldi	r24, 0x91	; 145
     698:	90 e0       	ldi	r25, 0x00	; 0
     69a:	0e 94 2b 02 	call	0x456	; 0x456 <forward(int, int)>
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:154

  while (isActive) {}
     69e:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <isActive>
     6a2:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <isActive+0x1>
     6a6:	89 2b       	or	r24, r25
     6a8:	d1 f7       	brne	.-12     	; 0x69e <run1()+0x38>
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:155
  backEnd(0, 20);
     6aa:	64 e1       	ldi	r22, 0x14	; 20
     6ac:	70 e0       	ldi	r23, 0x00	; 0
     6ae:	90 e0       	ldi	r25, 0x00	; 0
     6b0:	80 e0       	ldi	r24, 0x00	; 0
     6b2:	0e 94 9c 02 	call	0x538	; 0x538 <backEnd(int, int)>
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:156
  closeLid(110, 20);
     6b6:	64 e1       	ldi	r22, 0x14	; 20
     6b8:	70 e0       	ldi	r23, 0x00	; 0
     6ba:	8e e6       	ldi	r24, 0x6E	; 110
     6bc:	90 e0       	ldi	r25, 0x00	; 0
     6be:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <closeLid(int, int)>

000006c2 <run4()>:
_Z4run4v():
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:181
  closeLid(110, 1);
}

//Funny
void run4() { 
  openLid(10, 5);
     6c2:	65 e0       	ldi	r22, 0x05	; 5
     6c4:	70 e0       	ldi	r23, 0x00	; 0
     6c6:	8a e0       	ldi	r24, 0x0A	; 10
     6c8:	90 e0       	ldi	r25, 0x00	; 0
     6ca:	0e 94 b1 01 	call	0x362	; 0x362 <openLid(int, int)>
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:182
  closeLid(110,5);
     6ce:	65 e0       	ldi	r22, 0x05	; 5
     6d0:	70 e0       	ldi	r23, 0x00	; 0
     6d2:	8e e6       	ldi	r24, 0x6E	; 110
     6d4:	90 e0       	ldi	r25, 0x00	; 0
     6d6:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <closeLid(int, int)>
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:183
  openLid(10, 5);
     6da:	65 e0       	ldi	r22, 0x05	; 5
     6dc:	70 e0       	ldi	r23, 0x00	; 0
     6de:	8a e0       	ldi	r24, 0x0A	; 10
     6e0:	90 e0       	ldi	r25, 0x00	; 0
     6e2:	0e 94 b1 01 	call	0x362	; 0x362 <openLid(int, int)>
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:184
  closeLid(110,5);
     6e6:	65 e0       	ldi	r22, 0x05	; 5
     6e8:	70 e0       	ldi	r23, 0x00	; 0
     6ea:	8e e6       	ldi	r24, 0x6E	; 110
     6ec:	90 e0       	ldi	r25, 0x00	; 0
     6ee:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <closeLid(int, int)>
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:185
  openLid(10, 5);
     6f2:	65 e0       	ldi	r22, 0x05	; 5
     6f4:	70 e0       	ldi	r23, 0x00	; 0
     6f6:	8a e0       	ldi	r24, 0x0A	; 10
     6f8:	90 e0       	ldi	r25, 0x00	; 0
     6fa:	0e 94 b1 01 	call	0x362	; 0x362 <openLid(int, int)>
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:186
  closeLid(110,5); 
     6fe:	65 e0       	ldi	r22, 0x05	; 5
     700:	70 e0       	ldi	r23, 0x00	; 0
     702:	8e e6       	ldi	r24, 0x6E	; 110
     704:	90 e0       	ldi	r25, 0x00	; 0
     706:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <closeLid(int, int)>
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:187
  hold(3000);
     70a:	88 eb       	ldi	r24, 0xB8	; 184
     70c:	9b e0       	ldi	r25, 0x0B	; 11
     70e:	0e 94 10 03 	call	0x620	; 0x620 <hold(int)>
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:189

  openLid(10, 5);
     712:	65 e0       	ldi	r22, 0x05	; 5
     714:	70 e0       	ldi	r23, 0x00	; 0
     716:	8a e0       	ldi	r24, 0x0A	; 10
     718:	90 e0       	ldi	r25, 0x00	; 0
     71a:	0e 94 b1 01 	call	0x362	; 0x362 <openLid(int, int)>
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:190
  forward(145, 1);
     71e:	61 e0       	ldi	r22, 0x01	; 1
     720:	70 e0       	ldi	r23, 0x00	; 0
     722:	81 e9       	ldi	r24, 0x91	; 145
     724:	90 e0       	ldi	r25, 0x00	; 0
     726:	0e 94 2b 02 	call	0x456	; 0x456 <forward(int, int)>
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:192
  
  while (isActive) {}
     72a:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <isActive>
     72e:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <isActive+0x1>
     732:	89 2b       	or	r24, r25
     734:	d1 f7       	brne	.-12     	; 0x72a <run4()+0x68>
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:193
  backEnd(0, 10);  
     736:	6a e0       	ldi	r22, 0x0A	; 10
     738:	70 e0       	ldi	r23, 0x00	; 0
     73a:	90 e0       	ldi	r25, 0x00	; 0
     73c:	80 e0       	ldi	r24, 0x00	; 0
     73e:	0e 94 9c 02 	call	0x538	; 0x538 <backEnd(int, int)>
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:194
  closeLid(110, 10);
     742:	6a e0       	ldi	r22, 0x0A	; 10
     744:	70 e0       	ldi	r23, 0x00	; 0
     746:	8e e6       	ldi	r24, 0x6E	; 110
     748:	90 e0       	ldi	r25, 0x00	; 0
     74a:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <closeLid(int, int)>

0000074e <loop>:
loop():
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:60

}

///////////////////////////////////////////////////////////////////////////////////
void loop() {
  if ( ( (digitalRead(wakePin) == LOW) || (digitalRead(sensorPin) == HIGH) )  && (isActive == 1)) {
     74e:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <wakePin>
     752:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <wakePin+0x1>
     756:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <digitalRead>
     75a:	89 2b       	or	r24, r25
     75c:	f9 f4       	brne	.+62     	; 0x79c <loop+0x4e>
     75e:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <isActive>
     762:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <isActive+0x1>
     766:	01 97       	sbiw	r24, 0x01	; 1
     768:	09 f5       	brne	.+66     	; 0x7ac <loop+0x5e>
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:61
    digitalWrite(LEDPin, HIGH);
     76a:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <LEDPin>
     76e:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <LEDPin+0x1>
     772:	61 e0       	ldi	r22, 0x01	; 1
     774:	0e 94 b2 07 	call	0xf64	; 0xf64 <digitalWrite>
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:62
    digitalWrite(mosfetPin, LOW);
     778:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <mosfetPin>
     77c:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <mosfetPin+0x1>
     780:	60 e0       	ldi	r22, 0x00	; 0
     782:	0e 94 b2 07 	call	0xf64	; 0xf64 <digitalWrite>
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:64

    if( (digitalRead(sensorPin) == HIGH) ) { 
     786:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <sensorPin>
     78a:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <sensorPin+0x1>
     78e:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <digitalRead>
     792:	01 97       	sbiw	r24, 0x01	; 1
     794:	99 f4       	brne	.+38     	; 0x7bc <loop+0x6e>
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:65
      runLidTest();
     796:	0e 94 19 02 	call	0x432	; 0x432 <runLidTest()>
     79a:	08 c0       	rjmp	.+16     	; 0x7ac <loop+0x5e>
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:60 (discriminator 2)

}

///////////////////////////////////////////////////////////////////////////////////
void loop() {
  if ( ( (digitalRead(wakePin) == LOW) || (digitalRead(sensorPin) == HIGH) )  && (isActive == 1)) {
     79c:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <sensorPin>
     7a0:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <sensorPin+0x1>
     7a4:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <digitalRead>
     7a8:	01 97       	sbiw	r24, 0x01	; 1
     7aa:	c9 f2       	breq	.-78     	; 0x75e <loop+0x10>
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:92
            
                  default:
                    break;
            
                }
                  delay(500);
     7ac:	64 ef       	ldi	r22, 0xF4	; 244
     7ae:	71 e0       	ldi	r23, 0x01	; 1
     7b0:	80 e0       	ldi	r24, 0x00	; 0
     7b2:	90 e0       	ldi	r25, 0x00	; 0
     7b4:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <delay>
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:93
                  sleepNow();
     7b8:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <sleepNow()>
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:70
      runLidTest();
      delay(500);
      sleepNow();
    } else {
   
        switch (random(1, 4+1)) {
     7bc:	25 e0       	ldi	r18, 0x05	; 5
     7be:	30 e0       	ldi	r19, 0x00	; 0
     7c0:	40 e0       	ldi	r20, 0x00	; 0
     7c2:	50 e0       	ldi	r21, 0x00	; 0
     7c4:	61 e0       	ldi	r22, 0x01	; 1
     7c6:	70 e0       	ldi	r23, 0x00	; 0
     7c8:	80 e0       	ldi	r24, 0x00	; 0
     7ca:	90 e0       	ldi	r25, 0x00	; 0
     7cc:	0e 94 23 08 	call	0x1046	; 0x1046 <random(long, long)>
     7d0:	62 30       	cpi	r22, 0x02	; 2
     7d2:	71 05       	cpc	r23, r1
     7d4:	81 05       	cpc	r24, r1
     7d6:	91 05       	cpc	r25, r1
     7d8:	b1 f0       	breq	.+44     	; 0x806 <loop+0xb8>
     7da:	44 f4       	brge	.+16     	; 0x7ec <loop+0x9e>
     7dc:	61 30       	cpi	r22, 0x01	; 1
     7de:	71 05       	cpc	r23, r1
     7e0:	81 05       	cpc	r24, r1
     7e2:	91 05       	cpc	r25, r1
     7e4:	19 f7       	brne	.-58     	; 0x7ac <loop+0x5e>
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:73
                  
                  case 1:
                    run1();
     7e6:	0e 94 33 03 	call	0x666	; 0x666 <run1()>
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:74
                    break;
     7ea:	e0 cf       	rjmp	.-64     	; 0x7ac <loop+0x5e>
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:70
      runLidTest();
      delay(500);
      sleepNow();
    } else {
   
        switch (random(1, 4+1)) {
     7ec:	63 30       	cpi	r22, 0x03	; 3
     7ee:	71 05       	cpc	r23, r1
     7f0:	81 05       	cpc	r24, r1
     7f2:	91 05       	cpc	r25, r1
     7f4:	59 f0       	breq	.+22     	; 0x80c <loop+0xbe>
     7f6:	64 30       	cpi	r22, 0x04	; 4
     7f8:	71 05       	cpc	r23, r1
     7fa:	81 05       	cpc	r24, r1
     7fc:	91 05       	cpc	r25, r1
     7fe:	b1 f6       	brne	.-84     	; 0x7ac <loop+0x5e>
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:85
                 case 3:
                    run3();
                    break;
            
                 case 4:
                    run4();
     800:	0e 94 61 03 	call	0x6c2	; 0x6c2 <run4()>
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:86
                    break;
     804:	d3 cf       	rjmp	.-90     	; 0x7ac <loop+0x5e>
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:77
                  case 1:
                    run1();
                    break;
            
                  case 2:
                    run2();
     806:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <run2()>
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:78
                    break;
     80a:	d0 cf       	rjmp	.-96     	; 0x7ac <loop+0x5e>
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:81
            
                 case 3:
                    run3();
     80c:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <run3()>
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:82
                    break;
     810:	cd cf       	rjmp	.-102    	; 0x7ac <loop+0x5e>

00000812 <_GLOBAL__sub_I_wakePin>:
_GLOBAL__sub_I_wakePin():
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:24
//Lid
// Open = 0 / 10
// Closed = approx 110
 
//Create servo
Servo myservo;
     812:	89 e1       	ldi	r24, 0x19	; 25
     814:	91 e0       	ldi	r25, 0x01	; 1
     816:	0e 94 cc 04 	call	0x998	; 0x998 <Servo::Servo()>
C:\Users\Thomas\Documents\GitHub\StupedBax\StupedBaxV3/StupedBaxV3.ino:25
Servo myLidservo;
     81a:	86 e1       	ldi	r24, 0x16	; 22
     81c:	91 e0       	ldi	r25, 0x01	; 1
     81e:	0c 94 cc 04 	jmp	0x998	; 0x998 <Servo::Servo()>

00000822 <__vector_11>:
__vector_11():
C:\Users\Thomas\Documents\Arduino\libraries\Servo\src\avr/Servo.cpp:262
  servos[this->servoIndex].Pin.isActive = false;
  timer16_Sequence_t timer = SERVO_INDEX_TO_TIMER(servoIndex);
  if(isTimerActive(timer) == false) {
    finISR(timer);
  }
}
     822:	1f 92       	push	r1
     824:	0f 92       	push	r0
     826:	0f b6       	in	r0, 0x3f	; 63
     828:	0f 92       	push	r0
     82a:	11 24       	eor	r1, r1
     82c:	2f 93       	push	r18
     82e:	3f 93       	push	r19
     830:	4f 93       	push	r20
     832:	5f 93       	push	r21
     834:	6f 93       	push	r22
     836:	7f 93       	push	r23
     838:	8f 93       	push	r24
     83a:	9f 93       	push	r25
     83c:	af 93       	push	r26
     83e:	bf 93       	push	r27
     840:	ef 93       	push	r30
     842:	ff 93       	push	r31
handle_interrupts():
     844:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <Channel>
     848:	87 ff       	sbrs	r24, 7
     84a:	27 c0       	rjmp	.+78     	; 0x89a <__vector_11+0x78>
     84c:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     850:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     854:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <Channel>
     858:	8f 5f       	subi	r24, 0xFF	; 255
     85a:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <Channel>
     85e:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <Channel>
     862:	08 2e       	mov	r0, r24
     864:	00 0c       	add	r0, r0
     866:	99 0b       	sbc	r25, r25
     868:	20 91 20 01 	lds	r18, 0x0120	; 0x800120 <ServoCount>
     86c:	28 17       	cp	r18, r24
     86e:	19 06       	cpc	r1, r25
     870:	29 f0       	breq	.+10     	; 0x87c <__vector_11+0x5a>
     872:	24 f0       	brlt	.+8      	; 0x87c <__vector_11+0x5a>
     874:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <Channel>
     878:	8c 30       	cpi	r24, 0x0C	; 12
     87a:	dc f1       	brlt	.+118    	; 0x8f2 <__vector_11+0xd0>
     87c:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     880:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     884:	04 96       	adiw	r24, 0x04	; 4
     886:	80 32       	cpi	r24, 0x20	; 32
     888:	9e 44       	sbci	r25, 0x4E	; 78
     88a:	08 f4       	brcc	.+2      	; 0x88e <__vector_11+0x6c>
     88c:	7b c0       	rjmp	.+246    	; 0x984 <__stack+0x85>
     88e:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     892:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     896:	04 96       	adiw	r24, 0x04	; 4
     898:	77 c0       	rjmp	.+238    	; 0x988 <__stack+0x89>
     89a:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <Channel>
     89e:	08 2e       	mov	r0, r24
     8a0:	00 0c       	add	r0, r0
     8a2:	99 0b       	sbc	r25, r25
     8a4:	20 91 20 01 	lds	r18, 0x0120	; 0x800120 <ServoCount>
     8a8:	28 17       	cp	r18, r24
     8aa:	19 06       	cpc	r1, r25
     8ac:	99 f2       	breq	.-90     	; 0x854 <__vector_11+0x32>
     8ae:	94 f2       	brlt	.-92     	; 0x854 <__vector_11+0x32>
     8b0:	e0 91 21 01 	lds	r30, 0x0121	; 0x800121 <Channel>
     8b4:	8e 2f       	mov	r24, r30
     8b6:	ee 0f       	add	r30, r30
     8b8:	99 0b       	sbc	r25, r25
     8ba:	fc 01       	movw	r30, r24
     8bc:	ee 0f       	add	r30, r30
     8be:	ff 1f       	adc	r31, r31
     8c0:	e8 0f       	add	r30, r24
     8c2:	f9 1f       	adc	r31, r25
     8c4:	ee 5d       	subi	r30, 0xDE	; 222
     8c6:	fe 4f       	sbci	r31, 0xFE	; 254
     8c8:	80 81       	ld	r24, Z
     8ca:	86 ff       	sbrs	r24, 6
     8cc:	c3 cf       	rjmp	.-122    	; 0x854 <__vector_11+0x32>
     8ce:	e0 91 21 01 	lds	r30, 0x0121	; 0x800121 <Channel>
     8d2:	8e 2f       	mov	r24, r30
     8d4:	ee 0f       	add	r30, r30
     8d6:	99 0b       	sbc	r25, r25
     8d8:	fc 01       	movw	r30, r24
     8da:	ee 0f       	add	r30, r30
     8dc:	ff 1f       	adc	r31, r31
     8de:	e8 0f       	add	r30, r24
     8e0:	f9 1f       	adc	r31, r25
     8e2:	ee 5d       	subi	r30, 0xDE	; 222
     8e4:	fe 4f       	sbci	r31, 0xFE	; 254
     8e6:	80 81       	ld	r24, Z
     8e8:	60 e0       	ldi	r22, 0x00	; 0
     8ea:	8f 73       	andi	r24, 0x3F	; 63
     8ec:	0e 94 b2 07 	call	0xf64	; 0xf64 <digitalWrite>
     8f0:	b1 cf       	rjmp	.-158    	; 0x854 <__vector_11+0x32>
     8f2:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     8f6:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     8fa:	e0 91 21 01 	lds	r30, 0x0121	; 0x800121 <Channel>
     8fe:	8e 2f       	mov	r24, r30
     900:	ee 0f       	add	r30, r30
     902:	99 0b       	sbc	r25, r25
     904:	fc 01       	movw	r30, r24
     906:	ee 0f       	add	r30, r30
     908:	ff 1f       	adc	r31, r31
     90a:	e8 0f       	add	r30, r24
     90c:	f9 1f       	adc	r31, r25
     90e:	ee 5d       	subi	r30, 0xDE	; 222
     910:	fe 4f       	sbci	r31, 0xFE	; 254
     912:	81 81       	ldd	r24, Z+1	; 0x01
     914:	92 81       	ldd	r25, Z+2	; 0x02
     916:	82 0f       	add	r24, r18
     918:	93 1f       	adc	r25, r19
     91a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
     91e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
     922:	e0 91 21 01 	lds	r30, 0x0121	; 0x800121 <Channel>
     926:	8e 2f       	mov	r24, r30
     928:	ee 0f       	add	r30, r30
     92a:	99 0b       	sbc	r25, r25
     92c:	fc 01       	movw	r30, r24
     92e:	ee 0f       	add	r30, r30
     930:	ff 1f       	adc	r31, r31
     932:	e8 0f       	add	r30, r24
     934:	f9 1f       	adc	r31, r25
     936:	ee 5d       	subi	r30, 0xDE	; 222
     938:	fe 4f       	sbci	r31, 0xFE	; 254
     93a:	80 81       	ld	r24, Z
     93c:	86 ff       	sbrs	r24, 6
     93e:	11 c0       	rjmp	.+34     	; 0x962 <__stack+0x63>
     940:	e0 91 21 01 	lds	r30, 0x0121	; 0x800121 <Channel>
     944:	8e 2f       	mov	r24, r30
     946:	ee 0f       	add	r30, r30
     948:	99 0b       	sbc	r25, r25
     94a:	fc 01       	movw	r30, r24
     94c:	ee 0f       	add	r30, r30
     94e:	ff 1f       	adc	r31, r31
     950:	e8 0f       	add	r30, r24
     952:	f9 1f       	adc	r31, r25
     954:	ee 5d       	subi	r30, 0xDE	; 222
     956:	fe 4f       	sbci	r31, 0xFE	; 254
     958:	80 81       	ld	r24, Z
     95a:	61 e0       	ldi	r22, 0x01	; 1
     95c:	8f 73       	andi	r24, 0x3F	; 63
     95e:	0e 94 b2 07 	call	0xf64	; 0xf64 <digitalWrite>
__vector_11():
     962:	ff 91       	pop	r31
     964:	ef 91       	pop	r30
     966:	bf 91       	pop	r27
     968:	af 91       	pop	r26
     96a:	9f 91       	pop	r25
     96c:	8f 91       	pop	r24
     96e:	7f 91       	pop	r23
     970:	6f 91       	pop	r22
     972:	5f 91       	pop	r21
     974:	4f 91       	pop	r20
     976:	3f 91       	pop	r19
     978:	2f 91       	pop	r18
     97a:	0f 90       	pop	r0
     97c:	0f be       	out	0x3f, r0	; 63
     97e:	0f 90       	pop	r0
     980:	1f 90       	pop	r1
     982:	18 95       	reti
handle_interrupts():
     984:	80 e2       	ldi	r24, 0x20	; 32
     986:	9e e4       	ldi	r25, 0x4E	; 78
     988:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
     98c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
     990:	8f ef       	ldi	r24, 0xFF	; 255
     992:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <Channel>
__vector_11():
     996:	e5 cf       	rjmp	.-54     	; 0x962 <__stack+0x63>

00000998 <Servo::Servo()>:
_ZN5ServoC2Ev():
     998:	fc 01       	movw	r30, r24
     99a:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <ServoCount>
     99e:	9c 30       	cpi	r25, 0x0C	; 12
     9a0:	98 f4       	brcc	.+38     	; 0x9c8 <Servo::Servo()+0x30>
     9a2:	81 e0       	ldi	r24, 0x01	; 1
     9a4:	89 0f       	add	r24, r25
     9a6:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <ServoCount>
     9aa:	90 83       	st	Z, r25
     9ac:	89 2f       	mov	r24, r25
     9ae:	90 e0       	ldi	r25, 0x00	; 0
     9b0:	fc 01       	movw	r30, r24
     9b2:	ee 0f       	add	r30, r30
     9b4:	ff 1f       	adc	r31, r31
     9b6:	e8 0f       	add	r30, r24
     9b8:	f9 1f       	adc	r31, r25
     9ba:	ee 5d       	subi	r30, 0xDE	; 222
     9bc:	fe 4f       	sbci	r31, 0xFE	; 254
     9be:	8c ed       	ldi	r24, 0xDC	; 220
     9c0:	95 e0       	ldi	r25, 0x05	; 5
     9c2:	92 83       	std	Z+2, r25	; 0x02
     9c4:	81 83       	std	Z+1, r24	; 0x01
     9c6:	08 95       	ret
     9c8:	8f ef       	ldi	r24, 0xFF	; 255
     9ca:	80 83       	st	Z, r24
     9cc:	08 95       	ret

000009ce <Servo::attach(int, int, int)>:
_ZN5Servo6attachEiii():
     9ce:	df 92       	push	r13
     9d0:	ef 92       	push	r14
     9d2:	ff 92       	push	r15
     9d4:	0f 93       	push	r16
     9d6:	1f 93       	push	r17
     9d8:	cf 93       	push	r28
     9da:	df 93       	push	r29
     9dc:	ec 01       	movw	r28, r24
     9de:	d6 2e       	mov	r13, r22
     9e0:	7a 01       	movw	r14, r20
     9e2:	89 01       	movw	r16, r18
     9e4:	88 81       	ld	r24, Y
     9e6:	8c 30       	cpi	r24, 0x0C	; 12
     9e8:	08 f0       	brcs	.+2      	; 0x9ec <Servo::attach(int, int, int)+0x1e>
     9ea:	67 c0       	rjmp	.+206    	; 0xaba <Servo::attach(int, int, int)+0xec>
     9ec:	61 e0       	ldi	r22, 0x01	; 1
     9ee:	8d 2d       	mov	r24, r13
     9f0:	0e 94 76 07 	call	0xeec	; 0xeec <pinMode>
     9f4:	88 81       	ld	r24, Y
     9f6:	28 2f       	mov	r18, r24
     9f8:	30 e0       	ldi	r19, 0x00	; 0
     9fa:	f9 01       	movw	r30, r18
     9fc:	ee 0f       	add	r30, r30
     9fe:	ff 1f       	adc	r31, r31
     a00:	e2 0f       	add	r30, r18
     a02:	f3 1f       	adc	r31, r19
     a04:	ee 5d       	subi	r30, 0xDE	; 222
     a06:	fe 4f       	sbci	r31, 0xFE	; 254
     a08:	9d 2d       	mov	r25, r13
     a0a:	9f 73       	andi	r25, 0x3F	; 63
     a0c:	60 81       	ld	r22, Z
     a0e:	60 7c       	andi	r22, 0xC0	; 192
     a10:	69 2b       	or	r22, r25
     a12:	60 83       	st	Z, r22
     a14:	20 e2       	ldi	r18, 0x20	; 32
     a16:	32 e0       	ldi	r19, 0x02	; 2
     a18:	2e 19       	sub	r18, r14
     a1a:	3f 09       	sbc	r19, r15
     a1c:	37 ff       	sbrs	r19, 7
     a1e:	02 c0       	rjmp	.+4      	; 0xa24 <Servo::attach(int, int, int)+0x56>
     a20:	2d 5f       	subi	r18, 0xFD	; 253
     a22:	3f 4f       	sbci	r19, 0xFF	; 255
     a24:	35 95       	asr	r19
     a26:	27 95       	ror	r18
     a28:	35 95       	asr	r19
     a2a:	27 95       	ror	r18
     a2c:	29 83       	std	Y+1, r18	; 0x01
     a2e:	20 e6       	ldi	r18, 0x60	; 96
     a30:	39 e0       	ldi	r19, 0x09	; 9
     a32:	20 1b       	sub	r18, r16
     a34:	31 0b       	sbc	r19, r17
     a36:	37 ff       	sbrs	r19, 7
     a38:	02 c0       	rjmp	.+4      	; 0xa3e <Servo::attach(int, int, int)+0x70>
     a3a:	2d 5f       	subi	r18, 0xFD	; 253
     a3c:	3f 4f       	sbci	r19, 0xFF	; 255
     a3e:	35 95       	asr	r19
     a40:	27 95       	ror	r18
     a42:	35 95       	asr	r19
     a44:	27 95       	ror	r18
     a46:	2a 83       	std	Y+2, r18	; 0x02
     a48:	2c e0       	ldi	r18, 0x0C	; 12
     a4a:	62 2f       	mov	r22, r18
     a4c:	0e 94 a3 08 	call	0x1146	; 0x1146 <__udivmodqi4>
isTimerActive():
     a50:	82 9f       	mul	r24, r18
     a52:	b0 01       	movw	r22, r0
     a54:	11 24       	eor	r1, r1
     a56:	30 e0       	ldi	r19, 0x00	; 0
     a58:	20 e0       	ldi	r18, 0x00	; 0
     a5a:	ab 01       	movw	r20, r22
     a5c:	42 0f       	add	r20, r18
     a5e:	53 1f       	adc	r21, r19
     a60:	fa 01       	movw	r30, r20
     a62:	ee 0f       	add	r30, r30
     a64:	ff 1f       	adc	r31, r31
     a66:	e4 0f       	add	r30, r20
     a68:	f5 1f       	adc	r31, r21
     a6a:	ee 5d       	subi	r30, 0xDE	; 222
     a6c:	fe 4f       	sbci	r31, 0xFE	; 254
     a6e:	90 81       	ld	r25, Z
     a70:	96 fd       	sbrc	r25, 6
     a72:	16 c0       	rjmp	.+44     	; 0xaa0 <Servo::attach(int, int, int)+0xd2>
     a74:	2f 5f       	subi	r18, 0xFF	; 255
     a76:	3f 4f       	sbci	r19, 0xFF	; 255
     a78:	2c 30       	cpi	r18, 0x0C	; 12
     a7a:	31 05       	cpc	r19, r1
     a7c:	71 f7       	brne	.-36     	; 0xa5a <Servo::attach(int, int, int)+0x8c>
initISR():
     a7e:	81 11       	cpse	r24, r1
     a80:	0f c0       	rjmp	.+30     	; 0xaa0 <Servo::attach(int, int, int)+0xd2>
     a82:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
     a86:	82 e0       	ldi	r24, 0x02	; 2
     a88:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
     a8c:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     a90:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     a94:	b1 9a       	sbi	0x16, 1	; 22
     a96:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
     a9a:	82 60       	ori	r24, 0x02	; 2
     a9c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
_ZN5Servo6attachEiii():
     aa0:	e8 81       	ld	r30, Y
     aa2:	8e 2f       	mov	r24, r30
     aa4:	90 e0       	ldi	r25, 0x00	; 0
     aa6:	fc 01       	movw	r30, r24
     aa8:	ee 0f       	add	r30, r30
     aaa:	ff 1f       	adc	r31, r31
     aac:	e8 0f       	add	r30, r24
     aae:	f9 1f       	adc	r31, r25
     ab0:	ee 5d       	subi	r30, 0xDE	; 222
     ab2:	fe 4f       	sbci	r31, 0xFE	; 254
     ab4:	80 81       	ld	r24, Z
     ab6:	80 64       	ori	r24, 0x40	; 64
     ab8:	80 83       	st	Z, r24
     aba:	88 81       	ld	r24, Y
     abc:	df 91       	pop	r29
     abe:	cf 91       	pop	r28
     ac0:	1f 91       	pop	r17
     ac2:	0f 91       	pop	r16
     ac4:	ff 90       	pop	r15
     ac6:	ef 90       	pop	r14
     ac8:	df 90       	pop	r13
     aca:	08 95       	ret

00000acc <Servo::attach(int)>:
_ZN5Servo6attachEi():
     acc:	20 e6       	ldi	r18, 0x60	; 96
     ace:	39 e0       	ldi	r19, 0x09	; 9
     ad0:	40 e2       	ldi	r20, 0x20	; 32
     ad2:	52 e0       	ldi	r21, 0x02	; 2
     ad4:	0c 94 e7 04 	jmp	0x9ce	; 0x9ce <Servo::attach(int, int, int)>

00000ad8 <Servo::writeMicroseconds(int)>:
_ZN5Servo17writeMicrosecondsEi():
C:\Users\Thomas\Documents\Arduino\libraries\Servo\src\avr/Servo.cpp:276
  }
  this->writeMicroseconds(value);
}

void Servo::writeMicroseconds(int value)
{
     ad8:	dc 01       	movw	r26, r24
C:\Users\Thomas\Documents\Arduino\libraries\Servo\src\avr/Servo.cpp:278
  // calculate and store the values for the given channel
  byte channel = this->servoIndex;
     ada:	ec 91       	ld	r30, X
C:\Users\Thomas\Documents\Arduino\libraries\Servo\src\avr/Servo.cpp:279
  if( (channel < MAX_SERVOS) )   // ensure channel is valid
     adc:	ec 30       	cpi	r30, 0x0C	; 12
     ade:	80 f5       	brcc	.+96     	; 0xb40 <Servo::writeMicroseconds(int)+0x68>
C:\Users\Thomas\Documents\Arduino\libraries\Servo\src\avr/Servo.cpp:281
  {
    if( value < SERVO_MIN() )          // ensure pulse width is valid
     ae0:	11 96       	adiw	r26, 0x01	; 1
     ae2:	8c 91       	ld	r24, X
     ae4:	11 97       	sbiw	r26, 0x01	; 1
     ae6:	28 e8       	ldi	r18, 0x88	; 136
     ae8:	30 e0       	ldi	r19, 0x00	; 0
     aea:	28 1b       	sub	r18, r24
     aec:	31 09       	sbc	r19, r1
     aee:	87 fd       	sbrc	r24, 7
     af0:	33 95       	inc	r19
     af2:	22 0f       	add	r18, r18
     af4:	33 1f       	adc	r19, r19
     af6:	22 0f       	add	r18, r18
     af8:	33 1f       	adc	r19, r19
     afa:	62 17       	cp	r22, r18
     afc:	73 07       	cpc	r23, r19
     afe:	84 f0       	brlt	.+32     	; 0xb20 <Servo::writeMicroseconds(int)+0x48>
C:\Users\Thomas\Documents\Arduino\libraries\Servo\src\avr/Servo.cpp:283
      value = SERVO_MIN();
    else if( value > SERVO_MAX() )
     b00:	12 96       	adiw	r26, 0x02	; 2
     b02:	8c 91       	ld	r24, X
     b04:	28 e5       	ldi	r18, 0x58	; 88
     b06:	32 e0       	ldi	r19, 0x02	; 2
     b08:	28 1b       	sub	r18, r24
     b0a:	31 09       	sbc	r19, r1
     b0c:	87 fd       	sbrc	r24, 7
     b0e:	33 95       	inc	r19
     b10:	22 0f       	add	r18, r18
     b12:	33 1f       	adc	r19, r19
     b14:	22 0f       	add	r18, r18
     b16:	33 1f       	adc	r19, r19
     b18:	62 17       	cp	r22, r18
     b1a:	73 07       	cpc	r23, r19
     b1c:	0c f4       	brge	.+2      	; 0xb20 <Servo::writeMicroseconds(int)+0x48>
     b1e:	9b 01       	movw	r18, r22
C:\Users\Thomas\Documents\Arduino\libraries\Servo\src\avr/Servo.cpp:289
      value = SERVO_MAX();

    value = value - TRIM_DURATION;
    value = usToTicks(value);  // convert to ticks after compensating for interrupt overhead - 12 Aug 2009

    uint8_t oldSREG = SREG;
     b20:	4f b7       	in	r20, 0x3f	; 63
C:\Users\Thomas\Documents\Arduino\libraries\Servo\src\avr/Servo.cpp:290
    cli();
     b22:	f8 94       	cli
C:\Users\Thomas\Documents\Arduino\libraries\Servo\src\avr/Servo.cpp:291
    servos[channel].ticks = value;
     b24:	8e 2f       	mov	r24, r30
     b26:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\Thomas\Documents\Arduino\libraries\Servo\src\avr/Servo.cpp:286
    if( value < SERVO_MIN() )          // ensure pulse width is valid
      value = SERVO_MIN();
    else if( value > SERVO_MAX() )
      value = SERVO_MAX();

    value = value - TRIM_DURATION;
     b28:	22 50       	subi	r18, 0x02	; 2
     b2a:	31 09       	sbc	r19, r1
C:\Users\Thomas\Documents\Arduino\libraries\Servo\src\avr/Servo.cpp:291
    value = usToTicks(value);  // convert to ticks after compensating for interrupt overhead - 12 Aug 2009

    uint8_t oldSREG = SREG;
    cli();
    servos[channel].ticks = value;
     b2c:	fc 01       	movw	r30, r24
     b2e:	ee 0f       	add	r30, r30
     b30:	ff 1f       	adc	r31, r31
     b32:	e8 0f       	add	r30, r24
     b34:	f9 1f       	adc	r31, r25
     b36:	ee 5d       	subi	r30, 0xDE	; 222
     b38:	fe 4f       	sbci	r31, 0xFE	; 254
     b3a:	32 83       	std	Z+2, r19	; 0x02
     b3c:	21 83       	std	Z+1, r18	; 0x01
C:\Users\Thomas\Documents\Arduino\libraries\Servo\src\avr/Servo.cpp:292
    SREG = oldSREG;
     b3e:	4f bf       	out	0x3f, r20	; 63
C:\Users\Thomas\Documents\Arduino\libraries\Servo\src\avr/Servo.cpp:294
  }
}
     b40:	08 95       	ret

00000b42 <Servo::write(int)>:
_ZN5Servo5writeEi():
C:\Users\Thomas\Documents\Arduino\libraries\Servo\src\avr/Servo.cpp:265
    finISR(timer);
  }
}

void Servo::write(int value)
{
     b42:	af 92       	push	r10
     b44:	bf 92       	push	r11
     b46:	cf 92       	push	r12
     b48:	df 92       	push	r13
     b4a:	ef 92       	push	r14
     b4c:	ff 92       	push	r15
     b4e:	0f 93       	push	r16
     b50:	1f 93       	push	r17
     b52:	cf 93       	push	r28
     b54:	df 93       	push	r29
     b56:	ec 01       	movw	r28, r24
C:\Users\Thomas\Documents\Arduino\libraries\Servo\src\avr/Servo.cpp:266
  if(value < MIN_PULSE_WIDTH)
     b58:	60 32       	cpi	r22, 0x20	; 32
     b5a:	82 e0       	ldi	r24, 0x02	; 2
     b5c:	78 07       	cpc	r23, r24
     b5e:	0c f0       	brlt	.+2      	; 0xb62 <Servo::write(int)+0x20>
     b60:	3e c0       	rjmp	.+124    	; 0xbde <Servo::write(int)+0x9c>
     b62:	65 3b       	cpi	r22, 0xB5	; 181
     b64:	71 05       	cpc	r23, r1
     b66:	14 f0       	brlt	.+4      	; 0xb6c <Servo::write(int)+0x2a>
     b68:	64 eb       	ldi	r22, 0xB4	; 180
     b6a:	70 e0       	ldi	r23, 0x00	; 0
C:\Users\Thomas\Documents\Arduino\libraries\Servo\src\avr/Servo.cpp:270
  {  // treat values less than 544 as angles in degrees (valid values in microseconds are handled as microseconds)
    if(value < 0) value = 0;
    if(value > 180) value = 180;
    value = map(value, 0, 180, SERVO_MIN(),  SERVO_MAX());
     b6c:	89 81       	ldd	r24, Y+1	; 0x01
     b6e:	48 e8       	ldi	r20, 0x88	; 136
     b70:	a4 2e       	mov	r10, r20
     b72:	b1 2c       	mov	r11, r1
     b74:	a8 1a       	sub	r10, r24
     b76:	b1 08       	sbc	r11, r1
     b78:	87 fd       	sbrc	r24, 7
     b7a:	b3 94       	inc	r11
     b7c:	aa 0c       	add	r10, r10
     b7e:	bb 1c       	adc	r11, r11
     b80:	aa 0c       	add	r10, r10
     b82:	bb 1c       	adc	r11, r11
     b84:	0b 2c       	mov	r0, r11
     b86:	00 0c       	add	r0, r0
     b88:	cc 08       	sbc	r12, r12
     b8a:	dd 08       	sbc	r13, r13
     b8c:	77 ff       	sbrs	r23, 7
     b8e:	02 c0       	rjmp	.+4      	; 0xb94 <Servo::write(int)+0x52>
     b90:	70 e0       	ldi	r23, 0x00	; 0
     b92:	60 e0       	ldi	r22, 0x00	; 0
     b94:	07 2e       	mov	r0, r23
     b96:	00 0c       	add	r0, r0
     b98:	88 0b       	sbc	r24, r24
     b9a:	99 0b       	sbc	r25, r25
     b9c:	2a 81       	ldd	r18, Y+2	; 0x02
     b9e:	08 e5       	ldi	r16, 0x58	; 88
     ba0:	12 e0       	ldi	r17, 0x02	; 2
     ba2:	02 1b       	sub	r16, r18
     ba4:	11 09       	sbc	r17, r1
     ba6:	27 fd       	sbrc	r18, 7
     ba8:	13 95       	inc	r17
     baa:	00 0f       	add	r16, r16
     bac:	11 1f       	adc	r17, r17
     bae:	00 0f       	add	r16, r16
     bb0:	11 1f       	adc	r17, r17
     bb2:	01 2e       	mov	r0, r17
     bb4:	00 0c       	add	r0, r0
     bb6:	22 0b       	sbc	r18, r18
     bb8:	33 0b       	sbc	r19, r19
     bba:	3f 93       	push	r19
     bbc:	2f 93       	push	r18
     bbe:	1f 93       	push	r17
     bc0:	0f 93       	push	r16
     bc2:	14 eb       	ldi	r17, 0xB4	; 180
     bc4:	e1 2e       	mov	r14, r17
     bc6:	f1 2c       	mov	r15, r1
     bc8:	00 e0       	ldi	r16, 0x00	; 0
     bca:	10 e0       	ldi	r17, 0x00	; 0
     bcc:	20 e0       	ldi	r18, 0x00	; 0
     bce:	30 e0       	ldi	r19, 0x00	; 0
     bd0:	a9 01       	movw	r20, r18
     bd2:	0e 94 41 08 	call	0x1082	; 0x1082 <map(long, long, long, long, long)>
     bd6:	0f 90       	pop	r0
     bd8:	0f 90       	pop	r0
     bda:	0f 90       	pop	r0
     bdc:	0f 90       	pop	r0
C:\Users\Thomas\Documents\Arduino\libraries\Servo\src\avr/Servo.cpp:272
  }
  this->writeMicroseconds(value);
     bde:	ce 01       	movw	r24, r28
C:\Users\Thomas\Documents\Arduino\libraries\Servo\src\avr/Servo.cpp:273
}
     be0:	df 91       	pop	r29
     be2:	cf 91       	pop	r28
     be4:	1f 91       	pop	r17
     be6:	0f 91       	pop	r16
     be8:	ff 90       	pop	r15
     bea:	ef 90       	pop	r14
     bec:	df 90       	pop	r13
     bee:	cf 90       	pop	r12
     bf0:	bf 90       	pop	r11
     bf2:	af 90       	pop	r10
C:\Users\Thomas\Documents\Arduino\libraries\Servo\src\avr/Servo.cpp:272
  {  // treat values less than 544 as angles in degrees (valid values in microseconds are handled as microseconds)
    if(value < 0) value = 0;
    if(value > 180) value = 180;
    value = map(value, 0, 180, SERVO_MIN(),  SERVO_MAX());
  }
  this->writeMicroseconds(value);
     bf4:	0c 94 6c 05 	jmp	0xad8	; 0xad8 <Servo::writeMicroseconds(int)>

00000bf8 <nothing>:
nothing():
C:\Users\Thomas\Documents\ArduinoData\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WInterrupts.c:36

#include "wiring_private.h"

static void nothing(void) 
{
}
     bf8:	08 95       	ret

00000bfa <attachInterrupt>:
attachInterrupt():
C:\Users\Thomas\Documents\ArduinoData\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WInterrupts.c:64
  #endif
};

void attachInterrupt(uint8_t interruptNum, void (*userFunc)(void), int mode) 
{
  if(interruptNum < EXTERNAL_NUM_INTERRUPTS) 
     bfa:	82 30       	cpi	r24, 0x02	; 2
     bfc:	e8 f4       	brcc	.+58     	; 0xc38 <attachInterrupt+0x3e>
C:\Users\Thomas\Documents\ArduinoData\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WInterrupts.c:66
  {
    intFunc[interruptNum] = userFunc;
     bfe:	e8 2f       	mov	r30, r24
     c00:	f0 e0       	ldi	r31, 0x00	; 0
     c02:	ee 0f       	add	r30, r30
     c04:	ff 1f       	adc	r31, r31
     c06:	ee 5e       	subi	r30, 0xEE	; 238
     c08:	fe 4f       	sbci	r31, 0xFE	; 254
     c0a:	71 83       	std	Z+1, r23	; 0x01
     c0c:	60 83       	st	Z, r22
C:\Users\Thomas\Documents\ArduinoData\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WInterrupts.c:74
    // edge, or falling edge).  The mode constants were chosen to correspond
    // to the configuration bits in the hardware register, so we simply shift
    // the mode into place.
    
    // Enable interrupt        
    switch(interruptNum) 
     c0e:	81 30       	cpi	r24, 0x01	; 1
     c10:	41 f0       	breq	.+16     	; 0xc22 <attachInterrupt+0x28>
C:\Users\Thomas\Documents\ArduinoData\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WInterrupts.c:228
      #elif defined(__AVR_ATmega48__) || defined(__AVR_ATmega48P__) || defined(__AVR_ATmega48PB__) \
      || defined(__AVR_ATmega88__)  || defined(__AVR_ATmega88P__)  || defined(__AVR_ATmega88PB__)  \
      || defined(__AVR_ATmega168__) || defined(__AVR_ATmega168P__) || defined(__AVR_ATmega168PB__) \
      || defined(__AVR_ATmega328__) || defined(__AVR_ATmega328P__) || defined(__AVR_ATmega328PB__)
        case 0:
          EICRA = (EICRA & ~((1 << ISC00) | (1 << ISC01))) | (mode << ISC00);
     c12:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__DATA_REGION_ORIGIN__+0x9>
     c16:	8c 7f       	andi	r24, 0xFC	; 252
     c18:	48 2b       	or	r20, r24
     c1a:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__DATA_REGION_ORIGIN__+0x9>
C:\Users\Thomas\Documents\ArduinoData\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WInterrupts.c:229
          EIMSK |= (1 << INT0);
     c1e:	e8 9a       	sbi	0x1d, 0	; 29
C:\Users\Thomas\Documents\ArduinoData\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WInterrupts.c:230
          break;
     c20:	08 95       	ret
C:\Users\Thomas\Documents\ArduinoData\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WInterrupts.c:232
        case 1:
          EICRA = (EICRA & ~((1 << ISC10) | (1 << ISC11))) | (mode << ISC10);
     c22:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__DATA_REGION_ORIGIN__+0x9>
     c26:	83 7f       	andi	r24, 0xF3	; 243
     c28:	44 0f       	add	r20, r20
     c2a:	55 1f       	adc	r21, r21
     c2c:	44 0f       	add	r20, r20
     c2e:	55 1f       	adc	r21, r21
     c30:	48 2b       	or	r20, r24
     c32:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__DATA_REGION_ORIGIN__+0x9>
C:\Users\Thomas\Documents\ArduinoData\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WInterrupts.c:233
          EIMSK |= (1 << INT1);
     c36:	e9 9a       	sbi	0x1d, 1	; 29
C:\Users\Thomas\Documents\ArduinoData\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WInterrupts.c:239
          break;
              
      #endif
    }
  }
}
     c38:	08 95       	ret

00000c3a <detachInterrupt>:
detachInterrupt():
C:\Users\Thomas\Documents\ArduinoData\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WInterrupts.c:243

void detachInterrupt(uint8_t interruptNum) 
{
  if(interruptNum < EXTERNAL_NUM_INTERRUPTS) 
     c3a:	82 30       	cpi	r24, 0x02	; 2
     c3c:	68 f4       	brcc	.+26     	; 0xc58 <detachInterrupt+0x1e>
C:\Users\Thomas\Documents\ArduinoData\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WInterrupts.c:246
  {
    // Disable interrupt
    switch(interruptNum) 
     c3e:	e8 2f       	mov	r30, r24
     c40:	f0 e0       	ldi	r31, 0x00	; 0
     c42:	81 30       	cpi	r24, 0x01	; 1
     c44:	51 f0       	breq	.+20     	; 0xc5a <detachInterrupt+0x20>
C:\Users\Thomas\Documents\ArduinoData\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WInterrupts.c:366
      #elif defined(__AVR_ATmega48__) || defined(__AVR_ATmega48P__) || defined(__AVR_ATmega48PB__) \
      || defined(__AVR_ATmega88__)  || defined(__AVR_ATmega88P__)  || defined(__AVR_ATmega88PB__)  \
      || defined(__AVR_ATmega168__) || defined(__AVR_ATmega168P__) || defined(__AVR_ATmega168PB__) \
      || defined(__AVR_ATmega328__) || defined(__AVR_ATmega328P__) || defined(__AVR_ATmega328PB__)
        case 0:
          EIMSK &= ~(1 << INT0);
     c46:	e8 98       	cbi	0x1d, 0	; 29
C:\Users\Thomas\Documents\ArduinoData\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WInterrupts.c:374
          EIMSK &= ~(1 << INT1);
          break;
             
      #endif
    }      
    intFunc[interruptNum] = nothing;
     c48:	ee 0f       	add	r30, r30
     c4a:	ff 1f       	adc	r31, r31
     c4c:	ee 5e       	subi	r30, 0xEE	; 238
     c4e:	fe 4f       	sbci	r31, 0xFE	; 254
     c50:	8c ef       	ldi	r24, 0xFC	; 252
     c52:	95 e0       	ldi	r25, 0x05	; 5
     c54:	91 83       	std	Z+1, r25	; 0x01
     c56:	80 83       	st	Z, r24
C:\Users\Thomas\Documents\ArduinoData\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WInterrupts.c:376
  }
}
     c58:	08 95       	ret
C:\Users\Thomas\Documents\ArduinoData\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WInterrupts.c:369
      || defined(__AVR_ATmega328__) || defined(__AVR_ATmega328P__) || defined(__AVR_ATmega328PB__)
        case 0:
          EIMSK &= ~(1 << INT0);
          break;
        case 1:
          EIMSK &= ~(1 << INT1);
     c5a:	e9 98       	cbi	0x1d, 1	; 29
C:\Users\Thomas\Documents\ArduinoData\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WInterrupts.c:370
          break;
     c5c:	f5 cf       	rjmp	.-22     	; 0xc48 <detachInterrupt+0xe>

00000c5e <__vector_1>:
__vector_1():
C:\Users\Thomas\Documents\ArduinoData\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WInterrupts.c:441
// ATmega48/P/PB, ATmega88/P/PB, ATmega168/P/PB, ATmega328/P/PB
#elif defined(__AVR_ATmega48__) || defined(__AVR_ATmega48P__) || defined(__AVR_ATmega48PB__) \
|| defined(__AVR_ATmega88__)  || defined(__AVR_ATmega88P__)  || defined(__AVR_ATmega88PB__)  \
|| defined(__AVR_ATmega168__) || defined(__AVR_ATmega168P__) || defined(__AVR_ATmega168PB__) \
|| defined(__AVR_ATmega328__) || defined(__AVR_ATmega328P__) || defined(__AVR_ATmega328PB__)
  IMPLEMENT_ISR(INT0_vect, EXTERNAL_INT_0)
     c5e:	1f 92       	push	r1
     c60:	0f 92       	push	r0
     c62:	0f b6       	in	r0, 0x3f	; 63
     c64:	0f 92       	push	r0
     c66:	11 24       	eor	r1, r1
     c68:	2f 93       	push	r18
     c6a:	3f 93       	push	r19
     c6c:	4f 93       	push	r20
     c6e:	5f 93       	push	r21
     c70:	6f 93       	push	r22
     c72:	7f 93       	push	r23
     c74:	8f 93       	push	r24
     c76:	9f 93       	push	r25
     c78:	af 93       	push	r26
     c7a:	bf 93       	push	r27
     c7c:	ef 93       	push	r30
     c7e:	ff 93       	push	r31
     c80:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <intFunc>
     c84:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <intFunc+0x1>
     c88:	09 95       	icall
     c8a:	ff 91       	pop	r31
     c8c:	ef 91       	pop	r30
     c8e:	bf 91       	pop	r27
     c90:	af 91       	pop	r26
     c92:	9f 91       	pop	r25
     c94:	8f 91       	pop	r24
     c96:	7f 91       	pop	r23
     c98:	6f 91       	pop	r22
     c9a:	5f 91       	pop	r21
     c9c:	4f 91       	pop	r20
     c9e:	3f 91       	pop	r19
     ca0:	2f 91       	pop	r18
     ca2:	0f 90       	pop	r0
     ca4:	0f be       	out	0x3f, r0	; 63
     ca6:	0f 90       	pop	r0
     ca8:	1f 90       	pop	r1
     caa:	18 95       	reti

00000cac <__vector_2>:
__vector_2():
C:\Users\Thomas\Documents\ArduinoData\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WInterrupts.c:442
  IMPLEMENT_ISR(INT1_vect, EXTERNAL_INT_1)
     cac:	1f 92       	push	r1
     cae:	0f 92       	push	r0
     cb0:	0f b6       	in	r0, 0x3f	; 63
     cb2:	0f 92       	push	r0
     cb4:	11 24       	eor	r1, r1
     cb6:	2f 93       	push	r18
     cb8:	3f 93       	push	r19
     cba:	4f 93       	push	r20
     cbc:	5f 93       	push	r21
     cbe:	6f 93       	push	r22
     cc0:	7f 93       	push	r23
     cc2:	8f 93       	push	r24
     cc4:	9f 93       	push	r25
     cc6:	af 93       	push	r26
     cc8:	bf 93       	push	r27
     cca:	ef 93       	push	r30
     ccc:	ff 93       	push	r31
     cce:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <intFunc+0x2>
     cd2:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <intFunc+0x3>
     cd6:	09 95       	icall
     cd8:	ff 91       	pop	r31
     cda:	ef 91       	pop	r30
     cdc:	bf 91       	pop	r27
     cde:	af 91       	pop	r26
     ce0:	9f 91       	pop	r25
     ce2:	8f 91       	pop	r24
     ce4:	7f 91       	pop	r23
     ce6:	6f 91       	pop	r22
     ce8:	5f 91       	pop	r21
     cea:	4f 91       	pop	r20
     cec:	3f 91       	pop	r19
     cee:	2f 91       	pop	r18
     cf0:	0f 90       	pop	r0
     cf2:	0f be       	out	0x3f, r0	; 63
     cf4:	0f 90       	pop	r0
     cf6:	1f 90       	pop	r1
     cf8:	18 95       	reti

00000cfa <__vector_16>:
__vector_16():
C:\Users\Thomas\Documents\ArduinoData\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:939
    "   brne 1b"                     // 2 cycles
    : /* no outputs */
    : "w" (us)
  );
  // return = 4 cycles
}
     cfa:	1f 92       	push	r1
     cfc:	0f 92       	push	r0
     cfe:	0f b6       	in	r0, 0x3f	; 63
     d00:	0f 92       	push	r0
     d02:	11 24       	eor	r1, r1
     d04:	2f 93       	push	r18
     d06:	3f 93       	push	r19
     d08:	8f 93       	push	r24
     d0a:	9f 93       	push	r25
     d0c:	af 93       	push	r26
     d0e:	bf 93       	push	r27
     d10:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <timer0_millis>
     d14:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <timer0_millis+0x1>
     d18:	a0 91 4d 01 	lds	r26, 0x014D	; 0x80014d <timer0_millis+0x2>
     d1c:	b0 91 4e 01 	lds	r27, 0x014E	; 0x80014e <timer0_millis+0x3>
     d20:	30 91 4a 01 	lds	r19, 0x014A	; 0x80014a <timer0_fract>
     d24:	26 e0       	ldi	r18, 0x06	; 6
     d26:	23 0f       	add	r18, r19
     d28:	2d 37       	cpi	r18, 0x7D	; 125
     d2a:	68 f1       	brcs	.+90     	; 0xd86 <__vector_16+0x8c>
     d2c:	29 e8       	ldi	r18, 0x89	; 137
     d2e:	23 0f       	add	r18, r19
     d30:	03 96       	adiw	r24, 0x03	; 3
     d32:	a1 1d       	adc	r26, r1
     d34:	b1 1d       	adc	r27, r1
     d36:	20 93 4a 01 	sts	0x014A, r18	; 0x80014a <timer0_fract>
     d3a:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <timer0_millis>
     d3e:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <timer0_millis+0x1>
     d42:	a0 93 4d 01 	sts	0x014D, r26	; 0x80014d <timer0_millis+0x2>
     d46:	b0 93 4e 01 	sts	0x014E, r27	; 0x80014e <timer0_millis+0x3>
     d4a:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <timer0_overflow_count>
     d4e:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <timer0_overflow_count+0x1>
     d52:	a0 91 48 01 	lds	r26, 0x0148	; 0x800148 <timer0_overflow_count+0x2>
     d56:	b0 91 49 01 	lds	r27, 0x0149	; 0x800149 <timer0_overflow_count+0x3>
     d5a:	01 96       	adiw	r24, 0x01	; 1
     d5c:	a1 1d       	adc	r26, r1
     d5e:	b1 1d       	adc	r27, r1
     d60:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <timer0_overflow_count>
     d64:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <timer0_overflow_count+0x1>
     d68:	a0 93 48 01 	sts	0x0148, r26	; 0x800148 <timer0_overflow_count+0x2>
     d6c:	b0 93 49 01 	sts	0x0149, r27	; 0x800149 <timer0_overflow_count+0x3>
     d70:	bf 91       	pop	r27
     d72:	af 91       	pop	r26
     d74:	9f 91       	pop	r25
     d76:	8f 91       	pop	r24
     d78:	3f 91       	pop	r19
     d7a:	2f 91       	pop	r18
     d7c:	0f 90       	pop	r0
     d7e:	0f be       	out	0x3f, r0	; 63
     d80:	0f 90       	pop	r0
     d82:	1f 90       	pop	r1
     d84:	18 95       	reti
     d86:	02 96       	adiw	r24, 0x02	; 2
     d88:	a1 1d       	adc	r26, r1
     d8a:	b1 1d       	adc	r27, r1
     d8c:	d4 cf       	rjmp	.-88     	; 0xd36 <__vector_16+0x3c>

00000d8e <micros>:
micros():
     d8e:	3f b7       	in	r19, 0x3f	; 63
     d90:	f8 94       	cli
     d92:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <timer0_overflow_count>
     d96:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <timer0_overflow_count+0x1>
     d9a:	a0 91 48 01 	lds	r26, 0x0148	; 0x800148 <timer0_overflow_count+0x2>
     d9e:	b0 91 49 01 	lds	r27, 0x0149	; 0x800149 <timer0_overflow_count+0x3>
     da2:	26 b5       	in	r18, 0x26	; 38
     da4:	a8 9b       	sbis	0x15, 0	; 21
     da6:	05 c0       	rjmp	.+10     	; 0xdb2 <micros+0x24>
     da8:	2f 3f       	cpi	r18, 0xFF	; 255
     daa:	19 f0       	breq	.+6      	; 0xdb2 <micros+0x24>
     dac:	01 96       	adiw	r24, 0x01	; 1
     dae:	a1 1d       	adc	r26, r1
     db0:	b1 1d       	adc	r27, r1
     db2:	3f bf       	out	0x3f, r19	; 63
     db4:	ba 2f       	mov	r27, r26
     db6:	a9 2f       	mov	r26, r25
     db8:	98 2f       	mov	r25, r24
     dba:	88 27       	eor	r24, r24
     dbc:	bc 01       	movw	r22, r24
     dbe:	cd 01       	movw	r24, r26
     dc0:	62 0f       	add	r22, r18
     dc2:	71 1d       	adc	r23, r1
     dc4:	81 1d       	adc	r24, r1
     dc6:	91 1d       	adc	r25, r1
     dc8:	43 e0       	ldi	r20, 0x03	; 3
     dca:	66 0f       	add	r22, r22
     dcc:	77 1f       	adc	r23, r23
     dce:	88 1f       	adc	r24, r24
     dd0:	99 1f       	adc	r25, r25
     dd2:	4a 95       	dec	r20
     dd4:	d1 f7       	brne	.-12     	; 0xdca <micros+0x3c>
     dd6:	08 95       	ret

00000dd8 <delay>:
delay():
     dd8:	8f 92       	push	r8
     dda:	9f 92       	push	r9
     ddc:	af 92       	push	r10
     dde:	bf 92       	push	r11
     de0:	cf 92       	push	r12
     de2:	df 92       	push	r13
     de4:	ef 92       	push	r14
     de6:	ff 92       	push	r15
     de8:	6b 01       	movw	r12, r22
     dea:	7c 01       	movw	r14, r24
     dec:	0e 94 c7 06 	call	0xd8e	; 0xd8e <micros>
     df0:	4b 01       	movw	r8, r22
     df2:	5c 01       	movw	r10, r24
     df4:	c1 14       	cp	r12, r1
     df6:	d1 04       	cpc	r13, r1
     df8:	e1 04       	cpc	r14, r1
     dfa:	f1 04       	cpc	r15, r1
     dfc:	e9 f0       	breq	.+58     	; 0xe38 <delay+0x60>
     dfe:	0e 94 92 08 	call	0x1124	; 0x1124 <yield>
     e02:	0e 94 c7 06 	call	0xd8e	; 0xd8e <micros>
     e06:	68 19       	sub	r22, r8
     e08:	79 09       	sbc	r23, r9
     e0a:	8a 09       	sbc	r24, r10
     e0c:	9b 09       	sbc	r25, r11
     e0e:	68 3e       	cpi	r22, 0xE8	; 232
     e10:	73 40       	sbci	r23, 0x03	; 3
     e12:	81 05       	cpc	r24, r1
     e14:	91 05       	cpc	r25, r1
     e16:	70 f3       	brcs	.-36     	; 0xdf4 <delay+0x1c>
     e18:	21 e0       	ldi	r18, 0x01	; 1
     e1a:	c2 1a       	sub	r12, r18
     e1c:	d1 08       	sbc	r13, r1
     e1e:	e1 08       	sbc	r14, r1
     e20:	f1 08       	sbc	r15, r1
     e22:	88 ee       	ldi	r24, 0xE8	; 232
     e24:	88 0e       	add	r8, r24
     e26:	83 e0       	ldi	r24, 0x03	; 3
     e28:	98 1e       	adc	r9, r24
     e2a:	a1 1c       	adc	r10, r1
     e2c:	b1 1c       	adc	r11, r1
     e2e:	c1 14       	cp	r12, r1
     e30:	d1 04       	cpc	r13, r1
     e32:	e1 04       	cpc	r14, r1
     e34:	f1 04       	cpc	r15, r1
     e36:	29 f7       	brne	.-54     	; 0xe02 <delay+0x2a>
     e38:	ff 90       	pop	r15
     e3a:	ef 90       	pop	r14
     e3c:	df 90       	pop	r13
     e3e:	cf 90       	pop	r12
     e40:	bf 90       	pop	r11
     e42:	af 90       	pop	r10
     e44:	9f 90       	pop	r9
     e46:	8f 90       	pop	r8
     e48:	08 95       	ret

00000e4a <init>:
init():
C:\Users\Thomas\Documents\ArduinoData\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:945

void init()
{
  // this needs to be called before setup() or some functions won't
  // work there
  sei();
     e4a:	78 94       	sei
C:\Users\Thomas\Documents\ArduinoData\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:957

  // On the ATmega168, timer 0 is also used for fast hardware pwm
  // (using phase-correct PWM would mean that timer 0 overflowed half as often
  // resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
  TCCR0A |= _BV(WGM01) | _BV(WGM00);
     e4c:	84 b5       	in	r24, 0x24	; 36
     e4e:	83 60       	ori	r24, 0x03	; 3
     e50:	84 bd       	out	0x24, r24	; 36
C:\Users\Thomas\Documents\ArduinoData\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:972
  #if defined(WGM00) && defined(WGM01) // The ATmega8 doesn't have WGM00 and WGM01
    TCCR0 |= _BV(WGM01) | _BV(WGM00);
  #endif
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
  // This combination is for the standard 168/328/640/1280/1281/2560/2561
  TCCR0B |= _BV(CS01) | _BV(CS00);
     e52:	85 b5       	in	r24, 0x25	; 37
     e54:	83 60       	ori	r24, 0x03	; 3
     e56:	85 bd       	out	0x25, r24	; 37
C:\Users\Thomas\Documents\ArduinoData\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:984

// Enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
  TIMSK |= _BV(TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
  TIMSK0 |= _BV(TOIE0);
     e58:	ee e6       	ldi	r30, 0x6E	; 110
     e5a:	f0 e0       	ldi	r31, 0x00	; 0
     e5c:	80 81       	ld	r24, Z
     e5e:	81 60       	ori	r24, 0x01	; 1
     e60:	80 83       	st	Z, r24
C:\Users\Thomas\Documents\ArduinoData\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:995
// this is better for motors as it ensures an even waveform
// note, however, that fast pwm mode can achieve a frequency of up
// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
  TCCR1B = _BV(CS11); // Set timer 1 prescale factor to 64
     e62:	e1 e8       	ldi	r30, 0x81	; 129
     e64:	f0 e0       	ldi	r31, 0x00	; 0
     e66:	82 e0       	ldi	r24, 0x02	; 2
     e68:	80 83       	st	Z, r24
C:\Users\Thomas\Documents\ArduinoData\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:997
#if F_CPU >= 8000000L
  TCCR1B |= _BV(CS10);
     e6a:	80 81       	ld	r24, Z
     e6c:	81 60       	ori	r24, 0x01	; 1
     e6e:	80 83       	st	Z, r24
C:\Users\Thomas\Documents\ArduinoData\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1006
#if F_CPU >= 8000000L
  TCCR1 |= _BV(CS10);
#endif
#endif
#if defined(TCCR1A) && defined(WGM10)
  TCCR1A |= _BV(WGM10); // Put timer 1 in 8-bit phase correct pwm mode
     e70:	e0 e8       	ldi	r30, 0x80	; 128
     e72:	f0 e0       	ldi	r31, 0x00	; 0
     e74:	80 81       	ld	r24, Z
     e76:	81 60       	ori	r24, 0x01	; 1
     e78:	80 83       	st	Z, r24
C:\Users\Thomas\Documents\ArduinoData\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1013

// Set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
  TCCR2 |= _BV(CS22);
#elif defined(TCCR2B) && defined(CS22)
  TCCR2B |= _BV(CS22);
     e7a:	e1 eb       	ldi	r30, 0xB1	; 177
     e7c:	f0 e0       	ldi	r31, 0x00	; 0
     e7e:	80 81       	ld	r24, Z
     e80:	84 60       	ori	r24, 0x04	; 4
     e82:	80 83       	st	Z, r24
C:\Users\Thomas\Documents\ArduinoData\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1022

// Configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
  TCCR2 |= _BV(WGM20);
#elif defined(TCCR2A) && defined(WGM20)
  TCCR2A |= _BV(WGM20);
     e84:	e0 eb       	ldi	r30, 0xB0	; 176
     e86:	f0 e0       	ldi	r31, 0x00	; 0
     e88:	80 81       	ld	r24, Z
     e8a:	81 60       	ori	r24, 0x01	; 1
     e8c:	80 83       	st	Z, r24
C:\Users\Thomas\Documents\ArduinoData\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1052
#if defined(ADCSRA)
  // set a2d prescaler so we are inside the desired 50-200 KHz range.
  #if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0) | _BV(ADEN);
  #elif F_CPU >= 8000000 // 8 MHz / 64 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADEN);
     e8e:	86 e8       	ldi	r24, 0x86	; 134
     e90:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
C:\Users\Thomas\Documents\ArduinoData\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1070
  // here so they can be used as normal digital i/o; they will be
  // reconnected in Serial.begin()
#if defined(UCSRB)
  UCSRB = 0;
#elif defined(UCSR0B)
  UCSR0B = 0;
     e94:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
C:\Users\Thomas\Documents\ArduinoData\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1072
#endif
}
     e98:	08 95       	ret

00000e9a <turnOffPWM>:
turnOffPWM():
C:\Users\Thomas\Documents\ArduinoData\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:77
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
  switch (timer)
     e9a:	84 30       	cpi	r24, 0x04	; 4
     e9c:	81 f0       	breq	.+32     	; 0xebe <turnOffPWM+0x24>
     e9e:	28 f4       	brcc	.+10     	; 0xeaa <turnOffPWM+0x10>
     ea0:	82 30       	cpi	r24, 0x02	; 2
     ea2:	e9 f0       	breq	.+58     	; 0xede <turnOffPWM+0x44>
     ea4:	83 30       	cpi	r24, 0x03	; 3
     ea6:	f9 f0       	breq	.+62     	; 0xee6 <turnOffPWM+0x4c>
     ea8:	08 95       	ret
     eaa:	88 30       	cpi	r24, 0x08	; 8
     eac:	71 f0       	breq	.+28     	; 0xeca <turnOffPWM+0x30>
     eae:	89 30       	cpi	r24, 0x09	; 9
     eb0:	91 f0       	breq	.+36     	; 0xed6 <turnOffPWM+0x3c>
     eb2:	85 30       	cpi	r24, 0x05	; 5
     eb4:	b9 f4       	brne	.+46     	; 0xee4 <turnOffPWM+0x4a>
C:\Users\Thomas\Documents\ArduinoData\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:87
        TCCR1A &= ~_BV(COM1A1);
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
     eb6:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
     eba:	8f 7d       	andi	r24, 0xDF	; 223
     ebc:	03 c0       	rjmp	.+6      	; 0xec4 <turnOffPWM+0x2a>
C:\Users\Thomas\Documents\ArduinoData\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:82
  switch (timer)
  {
    // Timer1
    #if defined(TCCR1A) && defined(COM1A1)
      case TIMER1A:
        TCCR1A &= ~_BV(COM1A1);
     ebe:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
     ec2:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\Thomas\Documents\ArduinoData\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:87
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
     ec4:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
C:\Users\Thomas\Documents\ArduinoData\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:88
        break;
     ec8:	08 95       	ret
C:\Users\Thomas\Documents\ArduinoData\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:104
        TCCR2 &= ~_BV(COM21);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2A1)
      case TIMER2A:
        TCCR2A &= ~_BV(COM2A1);
     eca:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
     ece:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\Thomas\Documents\ArduinoData\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:109
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
     ed0:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
C:\Users\Thomas\Documents\ArduinoData\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:110
        break;
     ed4:	08 95       	ret
C:\Users\Thomas\Documents\ArduinoData\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:109
        TCCR2A &= ~_BV(COM2A1);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
     ed6:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
     eda:	8f 7d       	andi	r24, 0xDF	; 223
     edc:	f9 cf       	rjmp	.-14     	; 0xed0 <turnOffPWM+0x36>
C:\Users\Thomas\Documents\ArduinoData\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:176
        TCCR0 &= ~_BV(COM01);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0A1)
      case TIMER0A:
        TCCR0A &= ~_BV(COM0A1);
     ede:	84 b5       	in	r24, 0x24	; 36
     ee0:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\Thomas\Documents\ArduinoData\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:181
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
     ee2:	84 bd       	out	0x24, r24	; 36
C:\Users\Thomas\Documents\ArduinoData\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:185
        break;
    #endif
  }
}
     ee4:	08 95       	ret
C:\Users\Thomas\Documents\ArduinoData\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:181
        TCCR0A &= ~_BV(COM0A1);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
     ee6:	84 b5       	in	r24, 0x24	; 36
     ee8:	8f 7d       	andi	r24, 0xDF	; 223
     eea:	fb cf       	rjmp	.-10     	; 0xee2 <turnOffPWM+0x48>

00000eec <pinMode>:
pinMode():
C:\Users\Thomas\Documents\ArduinoData\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:30
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
     eec:	cf 93       	push	r28
     eee:	df 93       	push	r29
C:\Users\Thomas\Documents\ArduinoData\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:31
  uint8_t bit = digitalPinToBitMask(pin);
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	fc 01       	movw	r30, r24
     ef4:	e1 58       	subi	r30, 0x81	; 129
     ef6:	ff 4f       	sbci	r31, 0xFF	; 255
     ef8:	24 91       	lpm	r18, Z
C:\Users\Thomas\Documents\ArduinoData\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:32
  uint8_t port = digitalPinToPort(pin);
     efa:	8a 56       	subi	r24, 0x6A	; 106
     efc:	9f 4f       	sbci	r25, 0xFF	; 255
     efe:	fc 01       	movw	r30, r24
     f00:	84 91       	lpm	r24, Z
C:\Users\Thomas\Documents\ArduinoData\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:35
  volatile uint8_t *reg, *out;

  if (port == NOT_A_PIN) return;
     f02:	88 23       	and	r24, r24
     f04:	c9 f0       	breq	.+50     	; 0xf38 <pinMode+0x4c>
C:\Users\Thomas\Documents\ArduinoData\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:38

  // JWS: can I let the optimizer do this?
  reg = portModeRegister(port);
     f06:	90 e0       	ldi	r25, 0x00	; 0
     f08:	88 0f       	add	r24, r24
     f0a:	99 1f       	adc	r25, r25
     f0c:	fc 01       	movw	r30, r24
     f0e:	ef 53       	subi	r30, 0x3F	; 63
     f10:	ff 4f       	sbci	r31, 0xFF	; 255
     f12:	a5 91       	lpm	r26, Z+
     f14:	b4 91       	lpm	r27, Z
C:\Users\Thomas\Documents\ArduinoData\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:39
  out = portOutputRegister(port);
     f16:	fc 01       	movw	r30, r24
     f18:	e9 54       	subi	r30, 0x49	; 73
     f1a:	ff 4f       	sbci	r31, 0xFF	; 255
     f1c:	c5 91       	lpm	r28, Z+
     f1e:	d4 91       	lpm	r29, Z
C:\Users\Thomas\Documents\ArduinoData\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:41

  if (mode == INPUT) { 
     f20:	61 11       	cpse	r22, r1
     f22:	0d c0       	rjmp	.+26     	; 0xf3e <pinMode+0x52>
C:\Users\Thomas\Documents\ArduinoData\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:42
    uint8_t oldSREG = SREG;
     f24:	9f b7       	in	r25, 0x3f	; 63
C:\Users\Thomas\Documents\ArduinoData\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:43
    cli();
     f26:	f8 94       	cli
C:\Users\Thomas\Documents\ArduinoData\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:44
    *reg &= ~bit;
     f28:	8c 91       	ld	r24, X
     f2a:	20 95       	com	r18
     f2c:	82 23       	and	r24, r18
     f2e:	8c 93       	st	X, r24
C:\Users\Thomas\Documents\ArduinoData\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:45
    *out &= ~bit;
     f30:	88 81       	ld	r24, Y
     f32:	28 23       	and	r18, r24
C:\Users\Thomas\Documents\ArduinoData\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:51
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out |= bit;
     f34:	28 83       	st	Y, r18
C:\Users\Thomas\Documents\ArduinoData\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:52
    SREG = oldSREG;
     f36:	9f bf       	out	0x3f, r25	; 63
C:\Users\Thomas\Documents\ArduinoData\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:59
    uint8_t oldSREG = SREG;
    cli();
    *reg |= bit;
    SREG = oldSREG;
  }
}
     f38:	df 91       	pop	r29
     f3a:	cf 91       	pop	r28
     f3c:	08 95       	ret
C:\Users\Thomas\Documents\ArduinoData\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:47
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out &= ~bit;
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
     f3e:	62 30       	cpi	r22, 0x02	; 2
     f40:	51 f4       	brne	.+20     	; 0xf56 <pinMode+0x6a>
C:\Users\Thomas\Documents\ArduinoData\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:48
    uint8_t oldSREG = SREG;
     f42:	9f b7       	in	r25, 0x3f	; 63
C:\Users\Thomas\Documents\ArduinoData\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:49
    cli();
     f44:	f8 94       	cli
C:\Users\Thomas\Documents\ArduinoData\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:50
    *reg &= ~bit;
     f46:	3c 91       	ld	r19, X
     f48:	82 2f       	mov	r24, r18
     f4a:	80 95       	com	r24
     f4c:	83 23       	and	r24, r19
     f4e:	8c 93       	st	X, r24
C:\Users\Thomas\Documents\ArduinoData\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:51
    *out |= bit;
     f50:	e8 81       	ld	r30, Y
     f52:	2e 2b       	or	r18, r30
     f54:	ef cf       	rjmp	.-34     	; 0xf34 <pinMode+0x48>
C:\Users\Thomas\Documents\ArduinoData\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:54
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
     f56:	8f b7       	in	r24, 0x3f	; 63
C:\Users\Thomas\Documents\ArduinoData\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:55
    cli();
     f58:	f8 94       	cli
C:\Users\Thomas\Documents\ArduinoData\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:56
    *reg |= bit;
     f5a:	ec 91       	ld	r30, X
     f5c:	2e 2b       	or	r18, r30
     f5e:	2c 93       	st	X, r18
C:\Users\Thomas\Documents\ArduinoData\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:57
    SREG = oldSREG;
     f60:	8f bf       	out	0x3f, r24	; 63
     f62:	ea cf       	rjmp	.-44     	; 0xf38 <pinMode+0x4c>

00000f64 <digitalWrite>:
digitalWrite():
C:\Users\Thomas\Documents\ArduinoData\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:188
    #endif
  }
}

void digitalWrite(uint8_t pin, uint8_t val)
{
     f64:	1f 93       	push	r17
     f66:	cf 93       	push	r28
     f68:	df 93       	push	r29
C:\Users\Thomas\Documents\ArduinoData\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:189
  uint8_t timer = digitalPinToTimer(pin);
     f6a:	28 2f       	mov	r18, r24
     f6c:	30 e0       	ldi	r19, 0x00	; 0
     f6e:	f9 01       	movw	r30, r18
     f70:	e8 59       	subi	r30, 0x98	; 152
     f72:	ff 4f       	sbci	r31, 0xFF	; 255
     f74:	84 91       	lpm	r24, Z
C:\Users\Thomas\Documents\ArduinoData\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:190
  uint8_t bit = digitalPinToBitMask(pin);
     f76:	f9 01       	movw	r30, r18
     f78:	e1 58       	subi	r30, 0x81	; 129
     f7a:	ff 4f       	sbci	r31, 0xFF	; 255
     f7c:	d4 91       	lpm	r29, Z
C:\Users\Thomas\Documents\ArduinoData\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:191
  uint8_t port = digitalPinToPort(pin);
     f7e:	f9 01       	movw	r30, r18
     f80:	ea 56       	subi	r30, 0x6A	; 106
     f82:	ff 4f       	sbci	r31, 0xFF	; 255
     f84:	c4 91       	lpm	r28, Z
C:\Users\Thomas\Documents\ArduinoData\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:194
  volatile uint8_t *out;

  if (port == NOT_A_PIN) return;
     f86:	cc 23       	and	r28, r28
     f88:	a9 f0       	breq	.+42     	; 0xfb4 <digitalWrite+0x50>
     f8a:	16 2f       	mov	r17, r22
C:\Users\Thomas\Documents\ArduinoData\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:198

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     f8c:	81 11       	cpse	r24, r1
C:\Users\Thomas\Documents\ArduinoData\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:198 (discriminator 1)
     f8e:	0e 94 4d 07 	call	0xe9a	; 0xe9a <turnOffPWM>
C:\Users\Thomas\Documents\ArduinoData\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:200

  out = portOutputRegister(port);
     f92:	ec 2f       	mov	r30, r28
     f94:	f0 e0       	ldi	r31, 0x00	; 0
     f96:	ee 0f       	add	r30, r30
     f98:	ff 1f       	adc	r31, r31
     f9a:	e9 54       	subi	r30, 0x49	; 73
     f9c:	ff 4f       	sbci	r31, 0xFF	; 255
     f9e:	a5 91       	lpm	r26, Z+
     fa0:	b4 91       	lpm	r27, Z
C:\Users\Thomas\Documents\ArduinoData\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:202

  uint8_t oldSREG = SREG;
     fa2:	8f b7       	in	r24, 0x3f	; 63
C:\Users\Thomas\Documents\ArduinoData\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:203
  cli();
     fa4:	f8 94       	cli
C:\Users\Thomas\Documents\ArduinoData\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:206

  if (val == LOW) {
    *out &= ~bit;
     fa6:	ec 91       	ld	r30, X
C:\Users\Thomas\Documents\ArduinoData\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:205
  out = portOutputRegister(port);

  uint8_t oldSREG = SREG;
  cli();

  if (val == LOW) {
     fa8:	11 11       	cpse	r17, r1
     faa:	08 c0       	rjmp	.+16     	; 0xfbc <digitalWrite+0x58>
C:\Users\Thomas\Documents\ArduinoData\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:206
    *out &= ~bit;
     fac:	d0 95       	com	r29
     fae:	de 23       	and	r29, r30
C:\Users\Thomas\Documents\ArduinoData\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:208
  } else {
    *out |= bit;
     fb0:	dc 93       	st	X, r29
C:\Users\Thomas\Documents\ArduinoData\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:211
  }

  SREG = oldSREG;
     fb2:	8f bf       	out	0x3f, r24	; 63
C:\Users\Thomas\Documents\ArduinoData\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:212
}
     fb4:	df 91       	pop	r29
     fb6:	cf 91       	pop	r28
     fb8:	1f 91       	pop	r17
     fba:	08 95       	ret
C:\Users\Thomas\Documents\ArduinoData\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:208
  cli();

  if (val == LOW) {
    *out &= ~bit;
  } else {
    *out |= bit;
     fbc:	de 2b       	or	r29, r30
     fbe:	f8 cf       	rjmp	.-16     	; 0xfb0 <digitalWrite+0x4c>

00000fc0 <digitalRead>:
digitalRead():
C:\Users\Thomas\Documents\ArduinoData\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:215

  SREG = oldSREG;
}

int digitalRead(uint8_t pin)
{
     fc0:	cf 93       	push	r28
     fc2:	df 93       	push	r29
C:\Users\Thomas\Documents\ArduinoData\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:216
  uint8_t timer = digitalPinToTimer(pin);
     fc4:	28 2f       	mov	r18, r24
     fc6:	30 e0       	ldi	r19, 0x00	; 0
     fc8:	f9 01       	movw	r30, r18
     fca:	e8 59       	subi	r30, 0x98	; 152
     fcc:	ff 4f       	sbci	r31, 0xFF	; 255
     fce:	84 91       	lpm	r24, Z
C:\Users\Thomas\Documents\ArduinoData\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:217
  uint8_t bit = digitalPinToBitMask(pin);
     fd0:	f9 01       	movw	r30, r18
     fd2:	e1 58       	subi	r30, 0x81	; 129
     fd4:	ff 4f       	sbci	r31, 0xFF	; 255
     fd6:	d4 91       	lpm	r29, Z
C:\Users\Thomas\Documents\ArduinoData\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:218
  uint8_t port = digitalPinToPort(pin);
     fd8:	f9 01       	movw	r30, r18
     fda:	ea 56       	subi	r30, 0x6A	; 106
     fdc:	ff 4f       	sbci	r31, 0xFF	; 255
     fde:	c4 91       	lpm	r28, Z
C:\Users\Thomas\Documents\ArduinoData\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:220

  if (port == NOT_A_PIN) return LOW;
     fe0:	cc 23       	and	r28, r28
     fe2:	a1 f0       	breq	.+40     	; 0x100c <digitalRead+0x4c>
C:\Users\Thomas\Documents\ArduinoData\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:224

  // If the pin that support PWM output, we need to turn it off
  // before getting a digital reading.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     fe4:	81 11       	cpse	r24, r1
C:\Users\Thomas\Documents\ArduinoData\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:224 (discriminator 1)
     fe6:	0e 94 4d 07 	call	0xe9a	; 0xe9a <turnOffPWM>
C:\Users\Thomas\Documents\ArduinoData\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:226

  if (*portInputRegister(port) & bit) return HIGH;
     fea:	ec 2f       	mov	r30, r28
     fec:	f0 e0       	ldi	r31, 0x00	; 0
     fee:	ee 0f       	add	r30, r30
     ff0:	ff 1f       	adc	r31, r31
     ff2:	e3 55       	subi	r30, 0x53	; 83
     ff4:	ff 4f       	sbci	r31, 0xFF	; 255
     ff6:	a5 91       	lpm	r26, Z+
     ff8:	b4 91       	lpm	r27, Z
     ffa:	ec 91       	ld	r30, X
     ffc:	ed 23       	and	r30, r29
     ffe:	81 e0       	ldi	r24, 0x01	; 1
    1000:	90 e0       	ldi	r25, 0x00	; 0
    1002:	09 f4       	brne	.+2      	; 0x1006 <digitalRead+0x46>
    1004:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\Thomas\Documents\ArduinoData\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:228
  return LOW;
}
    1006:	df 91       	pop	r29
    1008:	cf 91       	pop	r28
    100a:	08 95       	ret
C:\Users\Thomas\Documents\ArduinoData\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:220
{
  uint8_t timer = digitalPinToTimer(pin);
  uint8_t bit = digitalPinToBitMask(pin);
  uint8_t port = digitalPinToPort(pin);

  if (port == NOT_A_PIN) return LOW;
    100c:	80 e0       	ldi	r24, 0x00	; 0
    100e:	90 e0       	ldi	r25, 0x00	; 0
    1010:	fa cf       	rjmp	.-12     	; 0x1006 <digitalRead+0x46>

00001012 <random(long)>:
_Z6randoml():
C:\Users\Thomas\Documents\ArduinoData\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WMath.cpp:36
    srandom(seed);
  }
}

long random(long howbig)
{
    1012:	cf 92       	push	r12
    1014:	df 92       	push	r13
    1016:	ef 92       	push	r14
    1018:	ff 92       	push	r15
    101a:	6b 01       	movw	r12, r22
    101c:	7c 01       	movw	r14, r24
C:\Users\Thomas\Documents\ArduinoData\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WMath.cpp:37
  if (howbig == 0) {
    101e:	c1 14       	cp	r12, r1
    1020:	d1 04       	cpc	r13, r1
    1022:	e1 04       	cpc	r14, r1
    1024:	f1 04       	cpc	r15, r1
    1026:	41 f0       	breq	.+16     	; 0x1038 <random(long)+0x26>
C:\Users\Thomas\Documents\ArduinoData\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WMath.cpp:40
    return 0;
  }
  return random() % howbig;
    1028:	0e 94 84 09 	call	0x1308	; 0x1308 <random>
    102c:	a7 01       	movw	r20, r14
    102e:	96 01       	movw	r18, r12
    1030:	0e 94 c3 08 	call	0x1186	; 0x1186 <__divmodsi4>
    1034:	6b 01       	movw	r12, r22
    1036:	7c 01       	movw	r14, r24
C:\Users\Thomas\Documents\ArduinoData\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WMath.cpp:41
}
    1038:	c7 01       	movw	r24, r14
    103a:	b6 01       	movw	r22, r12
    103c:	ff 90       	pop	r15
    103e:	ef 90       	pop	r14
    1040:	df 90       	pop	r13
    1042:	cf 90       	pop	r12
    1044:	08 95       	ret

00001046 <random(long, long)>:
_Z6randomll():
C:\Users\Thomas\Documents\ArduinoData\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WMath.cpp:44

long random(long howsmall, long howbig)
{
    1046:	cf 92       	push	r12
    1048:	df 92       	push	r13
    104a:	ef 92       	push	r14
    104c:	ff 92       	push	r15
    104e:	6b 01       	movw	r12, r22
    1050:	7c 01       	movw	r14, r24
C:\Users\Thomas\Documents\ArduinoData\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WMath.cpp:45
  if (howsmall >= howbig) {
    1052:	c2 16       	cp	r12, r18
    1054:	d3 06       	cpc	r13, r19
    1056:	e4 06       	cpc	r14, r20
    1058:	f5 06       	cpc	r15, r21
    105a:	64 f4       	brge	.+24     	; 0x1074 <random(long, long)+0x2e>
C:\Users\Thomas\Documents\ArduinoData\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WMath.cpp:48
    return howsmall;
  }
  long diff = howbig - howsmall;
    105c:	ca 01       	movw	r24, r20
    105e:	b9 01       	movw	r22, r18
    1060:	6c 19       	sub	r22, r12
    1062:	7d 09       	sbc	r23, r13
    1064:	8e 09       	sbc	r24, r14
    1066:	9f 09       	sbc	r25, r15
C:\Users\Thomas\Documents\ArduinoData\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WMath.cpp:49
  return random(diff) + howsmall;
    1068:	0e 94 09 08 	call	0x1012	; 0x1012 <random(long)>
    106c:	c6 0e       	add	r12, r22
    106e:	d7 1e       	adc	r13, r23
    1070:	e8 1e       	adc	r14, r24
    1072:	f9 1e       	adc	r15, r25
C:\Users\Thomas\Documents\ArduinoData\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WMath.cpp:50
}
    1074:	c7 01       	movw	r24, r14
    1076:	b6 01       	movw	r22, r12
    1078:	ff 90       	pop	r15
    107a:	ef 90       	pop	r14
    107c:	df 90       	pop	r13
    107e:	cf 90       	pop	r12
    1080:	08 95       	ret

00001082 <map(long, long, long, long, long)>:
_Z3maplllll():
C:\Users\Thomas\Documents\ArduinoData\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WMath.cpp:53

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
    1082:	4f 92       	push	r4
    1084:	5f 92       	push	r5
    1086:	6f 92       	push	r6
    1088:	7f 92       	push	r7
    108a:	af 92       	push	r10
    108c:	bf 92       	push	r11
    108e:	cf 92       	push	r12
    1090:	df 92       	push	r13
    1092:	ef 92       	push	r14
    1094:	ff 92       	push	r15
    1096:	0f 93       	push	r16
    1098:	1f 93       	push	r17
    109a:	cf 93       	push	r28
    109c:	df 93       	push	r29
    109e:	cd b7       	in	r28, 0x3d	; 61
    10a0:	de b7       	in	r29, 0x3e	; 62
    10a2:	29 01       	movw	r4, r18
    10a4:	3a 01       	movw	r6, r20
C:\Users\Thomas\Documents\ArduinoData\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WMath.cpp:54
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    10a6:	9b 01       	movw	r18, r22
    10a8:	ac 01       	movw	r20, r24
    10aa:	24 19       	sub	r18, r4
    10ac:	35 09       	sbc	r19, r5
    10ae:	46 09       	sbc	r20, r6
    10b0:	57 09       	sbc	r21, r7
    10b2:	89 89       	ldd	r24, Y+17	; 0x11
    10b4:	9a 89       	ldd	r25, Y+18	; 0x12
    10b6:	ab 89       	ldd	r26, Y+19	; 0x13
    10b8:	bc 89       	ldd	r27, Y+20	; 0x14
    10ba:	bc 01       	movw	r22, r24
    10bc:	cd 01       	movw	r24, r26
    10be:	6a 19       	sub	r22, r10
    10c0:	7b 09       	sbc	r23, r11
    10c2:	8c 09       	sbc	r24, r12
    10c4:	9d 09       	sbc	r25, r13
    10c6:	0e 94 93 08 	call	0x1126	; 0x1126 <__mulsi3>
    10ca:	a8 01       	movw	r20, r16
    10cc:	97 01       	movw	r18, r14
    10ce:	24 19       	sub	r18, r4
    10d0:	35 09       	sbc	r19, r5
    10d2:	46 09       	sbc	r20, r6
    10d4:	57 09       	sbc	r21, r7
    10d6:	0e 94 c3 08 	call	0x1186	; 0x1186 <__divmodsi4>
    10da:	ca 01       	movw	r24, r20
    10dc:	b9 01       	movw	r22, r18
    10de:	6a 0d       	add	r22, r10
    10e0:	7b 1d       	adc	r23, r11
    10e2:	8c 1d       	adc	r24, r12
    10e4:	9d 1d       	adc	r25, r13
C:\Users\Thomas\Documents\ArduinoData\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WMath.cpp:55
}
    10e6:	df 91       	pop	r29
    10e8:	cf 91       	pop	r28
    10ea:	1f 91       	pop	r17
    10ec:	0f 91       	pop	r16
    10ee:	ff 90       	pop	r15
    10f0:	ef 90       	pop	r14
    10f2:	df 90       	pop	r13
    10f4:	cf 90       	pop	r12
    10f6:	bf 90       	pop	r11
    10f8:	af 90       	pop	r10
    10fa:	7f 90       	pop	r7
    10fc:	6f 90       	pop	r6
    10fe:	5f 90       	pop	r5
    1100:	4f 90       	pop	r4
    1102:	08 95       	ret

00001104 <initVariant>:
initVariant():
C:\Users\Thomas\Documents\ArduinoData\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:28
int atexit(void (* /*func*/ )()) { return 0; }

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
    1104:	08 95       	ret

00001106 <main>:
main():
C:\Users\Thomas\Documents\ArduinoData\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:35
//void setupUSB() __attribute__((weak));
//void setupUSB() { }

int main(void)
{
  init();
    1106:	0e 94 25 07 	call	0xe4a	; 0xe4a <init>
C:\Users\Thomas\Documents\ArduinoData\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:37

  initVariant();
    110a:	0e 94 82 08 	call	0x1104	; 0x1104 <initVariant>
C:\Users\Thomas\Documents\ArduinoData\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:43

#if defined(USBCON)
  USBDevice.attach();
#endif
  
  setup();
    110e:	0e 94 29 01 	call	0x252	; 0x252 <setup>
C:\Users\Thomas\Documents\ArduinoData\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:47
    
  for (;;) {
    loop();
    if (serialEventRun) serialEventRun();
    1112:	c0 e0       	ldi	r28, 0x00	; 0
    1114:	d0 e0       	ldi	r29, 0x00	; 0
C:\Users\Thomas\Documents\ArduinoData\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:46
#endif
  
  setup();
    
  for (;;) {
    loop();
    1116:	0e 94 a7 03 	call	0x74e	; 0x74e <loop>
C:\Users\Thomas\Documents\ArduinoData\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:47
    if (serialEventRun) serialEventRun();
    111a:	20 97       	sbiw	r28, 0x00	; 0
    111c:	e1 f3       	breq	.-8      	; 0x1116 <main+0x10>
C:\Users\Thomas\Documents\ArduinoData\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:47 (discriminator 1)
    111e:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    1122:	f9 cf       	rjmp	.-14     	; 0x1116 <main+0x10>

00001124 <yield>:
__empty():
C:\Users\Thomas\Documents\ArduinoData\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/hooks.c:30
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
  // Empty
}
    1124:	08 95       	ret

00001126 <__mulsi3>:
__mulsi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:648
    1126:	db 01       	movw	r26, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:649
    1128:	8f 93       	push	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:650
    112a:	9f 93       	push	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:651
    112c:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <__muluhisi3>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:652
    1130:	bf 91       	pop	r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:653
    1132:	af 91       	pop	r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:655
    1134:	a2 9f       	mul	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:656
    1136:	80 0d       	add	r24, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:657
    1138:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:658
    113a:	a3 9f       	mul	r26, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:659
    113c:	90 0d       	add	r25, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:660
    113e:	b2 9f       	mul	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:661
    1140:	90 0d       	add	r25, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:662
    1142:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:663
    1144:	08 95       	ret

00001146 <__udivmodqi4>:
__udivmodqi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1346
    1146:	99 1b       	sub	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1347
    1148:	79 e0       	ldi	r23, 0x09	; 9
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1348
    114a:	04 c0       	rjmp	.+8      	; 0x1154 <__udivmodqi4_ep>

0000114c <__udivmodqi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1350
    114c:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1351
    114e:	96 17       	cp	r25, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1352
    1150:	08 f0       	brcs	.+2      	; 0x1154 <__udivmodqi4_ep>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1353
    1152:	96 1b       	sub	r25, r22

00001154 <__udivmodqi4_ep>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1355
    1154:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1356
    1156:	7a 95       	dec	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1357
    1158:	c9 f7       	brne	.-14     	; 0x114c <__udivmodqi4_loop>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1358
    115a:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1360
    115c:	08 95       	ret

0000115e <__divmodhi4>:
__divmodhi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1440
    115e:	97 fb       	bst	r25, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1441
    1160:	07 2e       	mov	r0, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1442
    1162:	16 f4       	brtc	.+4      	; 0x1168 <__divmodhi4+0xa>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1443
    1164:	00 94       	com	r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1444
    1166:	07 d0       	rcall	.+14     	; 0x1176 <__divmodhi4_neg1>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1446
    1168:	77 fd       	sbrc	r23, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1447
    116a:	09 d0       	rcall	.+18     	; 0x117e <__divmodhi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1448
    116c:	0e 94 ed 08 	call	0x11da	; 0x11da <__udivmodhi4>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1449
    1170:	07 fc       	sbrc	r0, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1450
    1172:	05 d0       	rcall	.+10     	; 0x117e <__divmodhi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1451
    1174:	3e f4       	brtc	.+14     	; 0x1184 <__divmodhi4_exit>

00001176 <__divmodhi4_neg1>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1454
    1176:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1455
    1178:	81 95       	neg	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1456
    117a:	9f 4f       	sbci	r25, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1457
    117c:	08 95       	ret

0000117e <__divmodhi4_neg2>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1460
    117e:	70 95       	com	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1461
    1180:	61 95       	neg	r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1462
    1182:	7f 4f       	sbci	r23, 0xFF	; 255

00001184 <__divmodhi4_exit>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1464
    1184:	08 95       	ret

00001186 <__divmodsi4>:
__divmodsi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1686
    1186:	05 2e       	mov	r0, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1687
    1188:	97 fb       	bst	r25, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1688
    118a:	1e f4       	brtc	.+6      	; 0x1192 <__divmodsi4+0xc>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1689
    118c:	00 94       	com	r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1690
    118e:	0e 94 da 08 	call	0x11b4	; 0x11b4 <__negsi2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1692
    1192:	57 fd       	sbrc	r21, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1693
    1194:	07 d0       	rcall	.+14     	; 0x11a4 <__divmodsi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1694
    1196:	0e 94 01 09 	call	0x1202	; 0x1202 <__udivmodsi4>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1695
    119a:	07 fc       	sbrc	r0, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1696
    119c:	03 d0       	rcall	.+6      	; 0x11a4 <__divmodsi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1697
    119e:	4e f4       	brtc	.+18     	; 0x11b2 <__divmodsi4_exit>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1698
    11a0:	0c 94 da 08 	jmp	0x11b4	; 0x11b4 <__negsi2>

000011a4 <__divmodsi4_neg2>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1701
    11a4:	50 95       	com	r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1702
    11a6:	40 95       	com	r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1703
    11a8:	30 95       	com	r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1704
    11aa:	21 95       	neg	r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1705
    11ac:	3f 4f       	sbci	r19, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1706
    11ae:	4f 4f       	sbci	r20, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1707
    11b0:	5f 4f       	sbci	r21, 0xFF	; 255

000011b2 <__divmodsi4_exit>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1709
    11b2:	08 95       	ret

000011b4 <__negsi2>:
__negsi2():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1718
    11b4:	90 95       	com	r25
    11b6:	80 95       	com	r24
    11b8:	70 95       	com	r23
    11ba:	61 95       	neg	r22
    11bc:	7f 4f       	sbci	r23, 0xFF	; 255
    11be:	8f 4f       	sbci	r24, 0xFF	; 255
    11c0:	9f 4f       	sbci	r25, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1719
    11c2:	08 95       	ret

000011c4 <__muluhisi3>:
__muluhisi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:626
    11c4:	0e 94 29 09 	call	0x1252	; 0x1252 <__umulhisi3>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:627
    11c8:	a5 9f       	mul	r26, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:628
    11ca:	90 0d       	add	r25, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:629
    11cc:	b4 9f       	mul	r27, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:630
    11ce:	90 0d       	add	r25, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:631
    11d0:	a4 9f       	mul	r26, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:632
    11d2:	80 0d       	add	r24, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:633
    11d4:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:634
    11d6:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:635
    11d8:	08 95       	ret

000011da <__udivmodhi4>:
__udivmodhi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1408
    11da:	aa 1b       	sub	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1409
    11dc:	bb 1b       	sub	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1410
    11de:	51 e1       	ldi	r21, 0x11	; 17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1411
    11e0:	07 c0       	rjmp	.+14     	; 0x11f0 <__udivmodhi4_ep>

000011e2 <__udivmodhi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1413
    11e2:	aa 1f       	adc	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1414
    11e4:	bb 1f       	adc	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1415
    11e6:	a6 17       	cp	r26, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1416
    11e8:	b7 07       	cpc	r27, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1417
    11ea:	10 f0       	brcs	.+4      	; 0x11f0 <__udivmodhi4_ep>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1418
    11ec:	a6 1b       	sub	r26, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1419
    11ee:	b7 0b       	sbc	r27, r23

000011f0 <__udivmodhi4_ep>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1421
    11f0:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1422
    11f2:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1423
    11f4:	5a 95       	dec	r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1424
    11f6:	a9 f7       	brne	.-22     	; 0x11e2 <__udivmodhi4_loop>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1425
    11f8:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1426
    11fa:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1428
    11fc:	bc 01       	movw	r22, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1430
    11fe:	cd 01       	movw	r24, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1432
    1200:	08 95       	ret

00001202 <__udivmodsi4>:
__udivmodsi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1638
    1202:	a1 e2       	ldi	r26, 0x21	; 33
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1639
    1204:	1a 2e       	mov	r1, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1640
    1206:	aa 1b       	sub	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1641
    1208:	bb 1b       	sub	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1642
    120a:	fd 01       	movw	r30, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1644
    120c:	0d c0       	rjmp	.+26     	; 0x1228 <__udivmodsi4_ep>

0000120e <__udivmodsi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1646
    120e:	aa 1f       	adc	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1647
    1210:	bb 1f       	adc	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1648
    1212:	ee 1f       	adc	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1649
    1214:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1650
    1216:	a2 17       	cp	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1651
    1218:	b3 07       	cpc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1652
    121a:	e4 07       	cpc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1653
    121c:	f5 07       	cpc	r31, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1654
    121e:	20 f0       	brcs	.+8      	; 0x1228 <__udivmodsi4_ep>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1655
    1220:	a2 1b       	sub	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1656
    1222:	b3 0b       	sbc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1657
    1224:	e4 0b       	sbc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1658
    1226:	f5 0b       	sbc	r31, r21

00001228 <__udivmodsi4_ep>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1660
    1228:	66 1f       	adc	r22, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1661
    122a:	77 1f       	adc	r23, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1662
    122c:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1663
    122e:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1664
    1230:	1a 94       	dec	r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1665
    1232:	69 f7       	brne	.-38     	; 0x120e <__udivmodsi4_loop>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1667
    1234:	60 95       	com	r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1668
    1236:	70 95       	com	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1669
    1238:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1670
    123a:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1672
    123c:	9b 01       	movw	r18, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1674
    123e:	ac 01       	movw	r20, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1676
    1240:	bd 01       	movw	r22, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1678
    1242:	cf 01       	movw	r24, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1680
    1244:	08 95       	ret

00001246 <__tablejump2__>:
__tablejump2__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
    1246:	ee 0f       	add	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
    1248:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2328
    124a:	05 90       	lpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2329
    124c:	f4 91       	lpm	r31, Z
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2330
    124e:	e0 2d       	mov	r30, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2331
    1250:	09 94       	ijmp

00001252 <__umulhisi3>:
__umulhisi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:564
    1252:	a2 9f       	mul	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:565
    1254:	b0 01       	movw	r22, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:566
    1256:	b3 9f       	mul	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:567
    1258:	c0 01       	movw	r24, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:568
    125a:	a3 9f       	mul	r26, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:573
    125c:	70 0d       	add	r23, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:574
    125e:	81 1d       	adc	r24, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:575
    1260:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:576
    1262:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:580
    1264:	b2 9f       	mul	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:581
    1266:	70 0d       	add	r23, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:582
    1268:	81 1d       	adc	r24, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:583
    126a:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:584
    126c:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:585
    126e:	08 95       	ret

00001270 <random_r>:
random_r():
    1270:	8f 92       	push	r8
    1272:	9f 92       	push	r9
    1274:	af 92       	push	r10
    1276:	bf 92       	push	r11
    1278:	cf 92       	push	r12
    127a:	df 92       	push	r13
    127c:	ef 92       	push	r14
    127e:	ff 92       	push	r15
    1280:	cf 93       	push	r28
    1282:	df 93       	push	r29
    1284:	ec 01       	movw	r28, r24
    1286:	68 81       	ld	r22, Y
    1288:	79 81       	ldd	r23, Y+1	; 0x01
    128a:	8a 81       	ldd	r24, Y+2	; 0x02
    128c:	9b 81       	ldd	r25, Y+3	; 0x03
    128e:	61 15       	cp	r22, r1
    1290:	71 05       	cpc	r23, r1
    1292:	81 05       	cpc	r24, r1
    1294:	91 05       	cpc	r25, r1
    1296:	21 f4       	brne	.+8      	; 0x12a0 <random_r+0x30>
    1298:	64 e2       	ldi	r22, 0x24	; 36
    129a:	79 ed       	ldi	r23, 0xD9	; 217
    129c:	8b e5       	ldi	r24, 0x5B	; 91
    129e:	97 e0       	ldi	r25, 0x07	; 7
    12a0:	2d e1       	ldi	r18, 0x1D	; 29
    12a2:	33 ef       	ldi	r19, 0xF3	; 243
    12a4:	41 e0       	ldi	r20, 0x01	; 1
    12a6:	50 e0       	ldi	r21, 0x00	; 0
    12a8:	0e 94 c3 08 	call	0x1186	; 0x1186 <__divmodsi4>
    12ac:	49 01       	movw	r8, r18
    12ae:	5a 01       	movw	r10, r20
    12b0:	9b 01       	movw	r18, r22
    12b2:	ac 01       	movw	r20, r24
    12b4:	a7 ea       	ldi	r26, 0xA7	; 167
    12b6:	b1 e4       	ldi	r27, 0x41	; 65
    12b8:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <__muluhisi3>
    12bc:	6b 01       	movw	r12, r22
    12be:	7c 01       	movw	r14, r24
    12c0:	ac ee       	ldi	r26, 0xEC	; 236
    12c2:	b4 ef       	ldi	r27, 0xF4	; 244
    12c4:	a5 01       	movw	r20, r10
    12c6:	94 01       	movw	r18, r8
    12c8:	0e 94 df 09 	call	0x13be	; 0x13be <__mulohisi3>
    12cc:	c6 0e       	add	r12, r22
    12ce:	d7 1e       	adc	r13, r23
    12d0:	e8 1e       	adc	r14, r24
    12d2:	f9 1e       	adc	r15, r25
    12d4:	f7 fe       	sbrs	r15, 7
    12d6:	06 c0       	rjmp	.+12     	; 0x12e4 <random_r+0x74>
    12d8:	81 e0       	ldi	r24, 0x01	; 1
    12da:	c8 1a       	sub	r12, r24
    12dc:	d1 08       	sbc	r13, r1
    12de:	e1 08       	sbc	r14, r1
    12e0:	80 e8       	ldi	r24, 0x80	; 128
    12e2:	f8 0a       	sbc	r15, r24
    12e4:	c8 82       	st	Y, r12
    12e6:	d9 82       	std	Y+1, r13	; 0x01
    12e8:	ea 82       	std	Y+2, r14	; 0x02
    12ea:	fb 82       	std	Y+3, r15	; 0x03
    12ec:	c7 01       	movw	r24, r14
    12ee:	b6 01       	movw	r22, r12
    12f0:	9f 77       	andi	r25, 0x7F	; 127
    12f2:	df 91       	pop	r29
    12f4:	cf 91       	pop	r28
    12f6:	ff 90       	pop	r15
    12f8:	ef 90       	pop	r14
    12fa:	df 90       	pop	r13
    12fc:	cf 90       	pop	r12
    12fe:	bf 90       	pop	r11
    1300:	af 90       	pop	r10
    1302:	9f 90       	pop	r9
    1304:	8f 90       	pop	r8
    1306:	08 95       	ret

00001308 <random>:
random():
    1308:	8f 92       	push	r8
    130a:	9f 92       	push	r9
    130c:	af 92       	push	r10
    130e:	bf 92       	push	r11
    1310:	cf 92       	push	r12
    1312:	df 92       	push	r13
    1314:	ef 92       	push	r14
    1316:	ff 92       	push	r15
    1318:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
    131c:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
    1320:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_start+0x2>
    1324:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_start+0x3>
    1328:	61 15       	cp	r22, r1
    132a:	71 05       	cpc	r23, r1
    132c:	81 05       	cpc	r24, r1
    132e:	91 05       	cpc	r25, r1
    1330:	21 f4       	brne	.+8      	; 0x133a <random+0x32>
    1332:	64 e2       	ldi	r22, 0x24	; 36
    1334:	79 ed       	ldi	r23, 0xD9	; 217
    1336:	8b e5       	ldi	r24, 0x5B	; 91
    1338:	97 e0       	ldi	r25, 0x07	; 7
    133a:	2d e1       	ldi	r18, 0x1D	; 29
    133c:	33 ef       	ldi	r19, 0xF3	; 243
    133e:	41 e0       	ldi	r20, 0x01	; 1
    1340:	50 e0       	ldi	r21, 0x00	; 0
    1342:	0e 94 c3 08 	call	0x1186	; 0x1186 <__divmodsi4>
    1346:	49 01       	movw	r8, r18
    1348:	5a 01       	movw	r10, r20
    134a:	9b 01       	movw	r18, r22
    134c:	ac 01       	movw	r20, r24
    134e:	a7 ea       	ldi	r26, 0xA7	; 167
    1350:	b1 e4       	ldi	r27, 0x41	; 65
    1352:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <__muluhisi3>
    1356:	6b 01       	movw	r12, r22
    1358:	7c 01       	movw	r14, r24
    135a:	ac ee       	ldi	r26, 0xEC	; 236
    135c:	b4 ef       	ldi	r27, 0xF4	; 244
    135e:	a5 01       	movw	r20, r10
    1360:	94 01       	movw	r18, r8
    1362:	0e 94 df 09 	call	0x13be	; 0x13be <__mulohisi3>
    1366:	c6 0e       	add	r12, r22
    1368:	d7 1e       	adc	r13, r23
    136a:	e8 1e       	adc	r14, r24
    136c:	f9 1e       	adc	r15, r25
    136e:	f7 fe       	sbrs	r15, 7
    1370:	06 c0       	rjmp	.+12     	; 0x137e <random+0x76>
    1372:	81 e0       	ldi	r24, 0x01	; 1
    1374:	c8 1a       	sub	r12, r24
    1376:	d1 08       	sbc	r13, r1
    1378:	e1 08       	sbc	r14, r1
    137a:	80 e8       	ldi	r24, 0x80	; 128
    137c:	f8 0a       	sbc	r15, r24
    137e:	c0 92 00 01 	sts	0x0100, r12	; 0x800100 <__data_start>
    1382:	d0 92 01 01 	sts	0x0101, r13	; 0x800101 <__data_start+0x1>
    1386:	e0 92 02 01 	sts	0x0102, r14	; 0x800102 <__data_start+0x2>
    138a:	f0 92 03 01 	sts	0x0103, r15	; 0x800103 <__data_start+0x3>
    138e:	c7 01       	movw	r24, r14
    1390:	b6 01       	movw	r22, r12
    1392:	9f 77       	andi	r25, 0x7F	; 127
    1394:	ff 90       	pop	r15
    1396:	ef 90       	pop	r14
    1398:	df 90       	pop	r13
    139a:	cf 90       	pop	r12
    139c:	bf 90       	pop	r11
    139e:	af 90       	pop	r10
    13a0:	9f 90       	pop	r9
    13a2:	8f 90       	pop	r8
    13a4:	08 95       	ret

000013a6 <srandom>:
srandom():
    13a6:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
    13aa:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
    13ae:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
    13b2:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
    13b6:	08 95       	ret

000013b8 <__mulshisi3>:
__mulshisi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:603
    13b8:	b7 ff       	sbrs	r27, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:605
    13ba:	0c 94 e2 08 	jmp	0x11c4	; 0x11c4 <__muluhisi3>

000013be <__mulohisi3>:
__mulohisi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:613
    13be:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <__muluhisi3>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:615
    13c2:	82 1b       	sub	r24, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:616
    13c4:	93 0b       	sbc	r25, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:617
    13c6:	08 95       	ret

000013c8 <_exit>:
exit():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
    13c8:	f8 94       	cli

000013ca <__stop_program>:
__stop_program():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
    13ca:	ff cf       	rjmp	.-2      	; 0x13ca <__stop_program>
